/*
	 Battle of Britain
	 Copyright (C) 2000, 2001 Empire Interactive (Europe) Ltd,
	 677 High Road, North Finchley, London N12 0DA

	 Please see the document licence.doc for the full licence agreement

2. LICENCE
 2.1 	
 	Subject to the provisions of this Agreement we now grant to you the 
 	following rights in respect of the Source Code:
  2.1.1 
  	the non-exclusive right to Exploit  the Source Code and Executable 
  	Code on any medium; and 
  2.1.2 
  	the non-exclusive right to create and distribute Derivative Works.
 2.2 	
 	Subject to the provisions of this Agreement we now grant you the
	following rights in respect of the Object Code:
  2.2.1 
	the non-exclusive right to Exploit the Object Code on the same
	terms and conditions set out in clause 3, provided that any
	distribution is done so on the terms of this Agreement and is
	accompanied by the Source Code and Executable Code (as
	applicable).

3. GENERAL OBLIGATIONS
 3.1 
 	In consideration of the licence granted in clause 2.1 you now agree:
  3.1.1 
	that when you distribute the Source Code or Executable Code or
	any Derivative Works to Recipients you will also include the
	terms of this Agreement;
  3.1.2 
	that when you make the Source Code, Executable Code or any
	Derivative Works ("Materials") available to download, you will
	ensure that Recipients must accept the terms of this Agreement
	before being allowed to download such Materials;
  3.1.3 
	that by Exploiting the Source Code or Executable Code you may
	not impose any further restrictions on a Recipient's subsequent
	Exploitation of the Source Code or Executable Code other than
	those contained in the terms and conditions of this Agreement;
  3.1.4 
	not (and not to allow any third party) to profit or make any
	charge for the Source Code, or Executable Code, any
	Exploitation of the Source Code or Executable Code, or for any
	Derivative Works;
  3.1.5 
	not to place any restrictions on the operability of the Source 
	Code;
  3.1.6 
	to attach prominent notices to any Derivative Works stating
	that you have changed the Source Code or Executable Code and to
	include the details anddate of such change; and
  3.1.7 
  	not to Exploit the Source Code or Executable Code otherwise than
	as expressly permitted by  this Agreement.

questions about this file may be asked at bob@rowansoftware.com a
better place to ask is http://www.simhq.com/ or even :-
http://www.simhq.com/cgi-bin/boards/cgi-bin/forumdisplay.cgi?action=topics&forum=Battle+of+Britain&number=40&DaysPrune=20&LastLogin=
*/

//////////////////////////////////////////////////////////////////////
//
// Module:      flagswitch.cpp
//
// Created:     5/26/00 by JON
//
// Description: Contains the flag switch routine that is ugly 
//				the contents of the routines can be generated using the following batchfile
//				giving arguments lastcount
//
//  <batch file>
/*
@echo off
	set i=0
	set stopAt=%@EVAL[ %1 + 1 ]
	echo switch( flags )
	echo {

:iterate
	echo case %i: TransformVertexAsRequired( sVertex, %i, curLF ); break;
	set i=%@EVAL[%i + 1]
	if %i==%stopAt goto end
	goto iterate
:end
    echo NODEFAULT;
	echo }
*/
//	<end batch file>
//
//////////////////////////////////////////////////////////////////////

//#pragma warnmsg ( "inline me" )
inline ULong Lib3D::InlineGenGuardBandClipCode( const SVertex* pV, const D3DVALUE sz, const ULong prevFlags )
{
	ULong retVal;
	switch ( prevFlags )
	{
//DeadCode JON 12Jun00 		case 0:		retVal = GenGuardBandClipCode( pV, sz, 0 );
		case 0:		retVal = 0;
		case 1:		retVal = GenGuardBandClipCode( pV, sz, 1 ); break;
		case 2:		retVal = GenGuardBandClipCode( pV, sz, 2 ); break;
		case 3:		retVal = GenGuardBandClipCode( pV, sz, 3 ); break;
		case 4:		retVal = GenGuardBandClipCode( pV, sz, 4 ); break;
		case 5:		retVal = GenGuardBandClipCode( pV, sz, 5 ); break;
		case 6:		retVal = GenGuardBandClipCode( pV, sz, 6 ); break;
		case 7:		retVal = GenGuardBandClipCode( pV, sz, 7 ); break;
		case 8:		retVal = GenGuardBandClipCode( pV, sz, 8 ); break;
		case 9:		retVal = GenGuardBandClipCode( pV, sz, 9 ); break;
		case 10:	retVal = GenGuardBandClipCode( pV, sz, 10 ); break;
		case 11:	retVal = GenGuardBandClipCode( pV, sz, 11 ); break;
		case 12:	retVal = GenGuardBandClipCode( pV, sz, 12 ); break;
		case 13:	retVal = GenGuardBandClipCode( pV, sz, 13 ); break;
		case 14:	retVal = GenGuardBandClipCode( pV, sz, 14 ); break;
		case 15:	retVal = GenGuardBandClipCode( pV, sz, 15 ); break;
		NODEFAULT;
	}
	return retVal;
}

inline void Lib3D::InlineSetCurrentMaterial(const HMATERIAL& mat, const ULong flags)
{
	switch( flags )			   
	{
		case 0: SetCurrentMaterial( mat, 0 ); break;
		case 1: SetCurrentMaterial( mat, 1 ); break;
		case 2: SetCurrentMaterial( mat, 2 ); break;
		case 3: SetCurrentMaterial( mat, 3 ); break;
		case 4: SetCurrentMaterial( mat, 4 ); break;
		case 5: SetCurrentMaterial( mat, 5 ); break;
		case 6: SetCurrentMaterial( mat, 6 ); break;
		case 7: SetCurrentMaterial( mat, 7 ); break;
		case 8: SetCurrentMaterial( mat, 8 ); break;
		case 9: SetCurrentMaterial( mat, 9 ); break;
		case 10: SetCurrentMaterial( mat, 10 ); break;
		case 11: SetCurrentMaterial( mat, 11 ); break;
		case 12: SetCurrentMaterial( mat, 12 ); break;
		case 13: SetCurrentMaterial( mat, 13 ); break;
		case 14: SetCurrentMaterial( mat, 14 ); break;
		case 15: SetCurrentMaterial( mat, 15 ); break;
		case 16: SetCurrentMaterial( mat, 16 ); break;
		case 17: SetCurrentMaterial( mat, 17 ); break;
		case 18: SetCurrentMaterial( mat, 18 ); break;
		case 19: SetCurrentMaterial( mat, 19 ); break;
		case 20: SetCurrentMaterial( mat, 20 ); break;
		case 21: SetCurrentMaterial( mat, 21 ); break;
		case 22: SetCurrentMaterial( mat, 22 ); break;
		case 23: SetCurrentMaterial( mat, 23 ); break;
		case 24: SetCurrentMaterial( mat, 24 ); break;
		case 25: SetCurrentMaterial( mat, 25 ); break;
		case 26: SetCurrentMaterial( mat, 26 ); break;
		case 27: SetCurrentMaterial( mat, 27 ); break;
		case 28: SetCurrentMaterial( mat, 28 ); break;
		case 29: SetCurrentMaterial( mat, 29 ); break;
		case 30: SetCurrentMaterial( mat, 30 ); break;
		case 31: SetCurrentMaterial( mat, 31 ); break;
		case 32: SetCurrentMaterial( mat, 32 ); break;
		case 33: SetCurrentMaterial( mat, 33 ); break;
		case 34: SetCurrentMaterial( mat, 34 ); break;
		case 35: SetCurrentMaterial( mat, 35 ); break;
		case 36: SetCurrentMaterial( mat, 36 ); break;
		case 37: SetCurrentMaterial( mat, 37 ); break;
		case 38: SetCurrentMaterial( mat, 38 ); break;
		case 39: SetCurrentMaterial( mat, 39 ); break;
		case 40: SetCurrentMaterial( mat, 40 ); break;
		case 41: SetCurrentMaterial( mat, 41 ); break;
		case 42: SetCurrentMaterial( mat, 42 ); break;
		case 43: SetCurrentMaterial( mat, 43 ); break;
		case 44: SetCurrentMaterial( mat, 44 ); break;
		case 45: SetCurrentMaterial( mat, 45 ); break;
		case 46: SetCurrentMaterial( mat, 46 ); break;
		case 47: SetCurrentMaterial( mat, 47 ); break;
		case 48: SetCurrentMaterial( mat, 48 ); break;
		case 49: SetCurrentMaterial( mat, 49 ); break;
		case 50: SetCurrentMaterial( mat, 50 ); break;
		case 51: SetCurrentMaterial( mat, 51 ); break;
		case 52: SetCurrentMaterial( mat, 52 ); break;
		case 53: SetCurrentMaterial( mat, 53 ); break;
		case 54: SetCurrentMaterial( mat, 54 ); break;
		case 55: SetCurrentMaterial( mat, 55 ); break;
		case 56: SetCurrentMaterial( mat, 56 ); break;
		case 57: SetCurrentMaterial( mat, 57 ); break;
		case 58: SetCurrentMaterial( mat, 58 ); break;
		case 59: SetCurrentMaterial( mat, 59 ); break;
		case 60: SetCurrentMaterial( mat, 60 ); break;
		case 61: SetCurrentMaterial( mat, 61 ); break;
		case 62: SetCurrentMaterial( mat, 62 ); break;
		case 63: SetCurrentMaterial( mat, 63 ); break;
		NODEFAULT;
	}
}
//#pragma warnmsg ( "inline me" )
inline void Lib3D::InlineVertexTransform( SVertex* sVertex, const ULong flags, const LIGHTFLAG curLF )
{
	switch( flags )			   
	{
		case 0: TransformVertexAsRequired( sVertex, 0, curLF ); break;
		case 1: TransformVertexAsRequired( sVertex, 1, curLF ); break;
		case 2: TransformVertexAsRequired( sVertex, 2, curLF ); break;
		case 3: TransformVertexAsRequired( sVertex, 3, curLF ); break;
		case 4: TransformVertexAsRequired( sVertex, 4, curLF ); break;
		case 5: TransformVertexAsRequired( sVertex, 5, curLF ); break;
		case 6: TransformVertexAsRequired( sVertex, 6, curLF ); break;
		case 7: TransformVertexAsRequired( sVertex, 7, curLF ); break;
		case 8: TransformVertexAsRequired( sVertex, 8, curLF ); break;
		case 9: TransformVertexAsRequired( sVertex, 9, curLF ); break;
		case 10: TransformVertexAsRequired( sVertex, 10, curLF ); break;
		case 11: TransformVertexAsRequired( sVertex, 11, curLF ); break;
		case 12: TransformVertexAsRequired( sVertex, 12, curLF ); break;
		case 13: TransformVertexAsRequired( sVertex, 13, curLF ); break;
		case 14: TransformVertexAsRequired( sVertex, 14, curLF ); break;
		case 15: TransformVertexAsRequired( sVertex, 15, curLF ); break;
		case 16: TransformVertexAsRequired( sVertex, 16, curLF ); break;
		case 17: TransformVertexAsRequired( sVertex, 17, curLF ); break;
		case 18: TransformVertexAsRequired( sVertex, 18, curLF ); break;
		case 19: TransformVertexAsRequired( sVertex, 19, curLF ); break;
		case 20: TransformVertexAsRequired( sVertex, 20, curLF ); break;
		case 21: TransformVertexAsRequired( sVertex, 21, curLF ); break;
		case 22: TransformVertexAsRequired( sVertex, 22, curLF ); break;
		case 23: TransformVertexAsRequired( sVertex, 23, curLF ); break;
		case 24: TransformVertexAsRequired( sVertex, 24, curLF ); break;
		case 25: TransformVertexAsRequired( sVertex, 25, curLF ); break;
		case 26: TransformVertexAsRequired( sVertex, 26, curLF ); break;
		case 27: TransformVertexAsRequired( sVertex, 27, curLF ); break;
		case 28: TransformVertexAsRequired( sVertex, 28, curLF ); break;
		case 29: TransformVertexAsRequired( sVertex, 29, curLF ); break;
		case 30: TransformVertexAsRequired( sVertex, 30, curLF ); break;
		case 31: TransformVertexAsRequired( sVertex, 31, curLF ); break;
		case 32: TransformVertexAsRequired( sVertex, 32, curLF ); break;
		case 33: TransformVertexAsRequired( sVertex, 33, curLF ); break;
		case 34: TransformVertexAsRequired( sVertex, 34, curLF ); break;
		case 35: TransformVertexAsRequired( sVertex, 35, curLF ); break;
		case 36: TransformVertexAsRequired( sVertex, 36, curLF ); break;
		case 37: TransformVertexAsRequired( sVertex, 37, curLF ); break;
		case 38: TransformVertexAsRequired( sVertex, 38, curLF ); break;
		case 39: TransformVertexAsRequired( sVertex, 39, curLF ); break;
		case 40: TransformVertexAsRequired( sVertex, 40, curLF ); break;
		case 41: TransformVertexAsRequired( sVertex, 41, curLF ); break;
		case 42: TransformVertexAsRequired( sVertex, 42, curLF ); break;
		case 43: TransformVertexAsRequired( sVertex, 43, curLF ); break;
		case 44: TransformVertexAsRequired( sVertex, 44, curLF ); break;
		case 45: TransformVertexAsRequired( sVertex, 45, curLF ); break;
		case 46: TransformVertexAsRequired( sVertex, 46, curLF ); break;
		case 47: TransformVertexAsRequired( sVertex, 47, curLF ); break;
		case 48: TransformVertexAsRequired( sVertex, 48, curLF ); break;
		case 49: TransformVertexAsRequired( sVertex, 49, curLF ); break;
		case 50: TransformVertexAsRequired( sVertex, 50, curLF ); break;
		case 51: TransformVertexAsRequired( sVertex, 51, curLF ); break;
		case 52: TransformVertexAsRequired( sVertex, 52, curLF ); break;
		case 53: TransformVertexAsRequired( sVertex, 53, curLF ); break;
		case 54: TransformVertexAsRequired( sVertex, 54, curLF ); break;
		case 55: TransformVertexAsRequired( sVertex, 55, curLF ); break;
		case 56: TransformVertexAsRequired( sVertex, 56, curLF ); break;
		case 57: TransformVertexAsRequired( sVertex, 57, curLF ); break;
		case 58: TransformVertexAsRequired( sVertex, 58, curLF ); break;
		case 59: TransformVertexAsRequired( sVertex, 59, curLF ); break;
		case 60: TransformVertexAsRequired( sVertex, 60, curLF ); break;
		case 61: TransformVertexAsRequired( sVertex, 61, curLF ); break;
		case 62: TransformVertexAsRequired( sVertex, 62, curLF ); break;
		case 63: TransformVertexAsRequired( sVertex, 63, curLF ); break;
		case 64: TransformVertexAsRequired( sVertex, 64, curLF ); break;
		case 65: TransformVertexAsRequired( sVertex, 65, curLF ); break;
		case 66: TransformVertexAsRequired( sVertex, 66, curLF ); break;
		case 67: TransformVertexAsRequired( sVertex, 67, curLF ); break;
		case 68: TransformVertexAsRequired( sVertex, 68, curLF ); break;
		case 69: TransformVertexAsRequired( sVertex, 69, curLF ); break;
		case 70: TransformVertexAsRequired( sVertex, 70, curLF ); break;
		case 71: TransformVertexAsRequired( sVertex, 71, curLF ); break;
		case 72: TransformVertexAsRequired( sVertex, 72, curLF ); break;
		case 73: TransformVertexAsRequired( sVertex, 73, curLF ); break;
		case 74: TransformVertexAsRequired( sVertex, 74, curLF ); break;
		case 75: TransformVertexAsRequired( sVertex, 75, curLF ); break;
		case 76: TransformVertexAsRequired( sVertex, 76, curLF ); break;
		case 77: TransformVertexAsRequired( sVertex, 77, curLF ); break;
		case 78: TransformVertexAsRequired( sVertex, 78, curLF ); break;
		case 79: TransformVertexAsRequired( sVertex, 79, curLF ); break;
		case 80: TransformVertexAsRequired( sVertex, 80, curLF ); break;
		case 81: TransformVertexAsRequired( sVertex, 81, curLF ); break;
		case 82: TransformVertexAsRequired( sVertex, 82, curLF ); break;
		case 83: TransformVertexAsRequired( sVertex, 83, curLF ); break;
		case 84: TransformVertexAsRequired( sVertex, 84, curLF ); break;
		case 85: TransformVertexAsRequired( sVertex, 85, curLF ); break;
		case 86: TransformVertexAsRequired( sVertex, 86, curLF ); break;
		case 87: TransformVertexAsRequired( sVertex, 87, curLF ); break;
		case 88: TransformVertexAsRequired( sVertex, 88, curLF ); break;
		case 89: TransformVertexAsRequired( sVertex, 89, curLF ); break;
		case 90: TransformVertexAsRequired( sVertex, 90, curLF ); break;
		case 91: TransformVertexAsRequired( sVertex, 91, curLF ); break;
		case 92: TransformVertexAsRequired( sVertex, 92, curLF ); break;
		case 93: TransformVertexAsRequired( sVertex, 93, curLF ); break;
		case 94: TransformVertexAsRequired( sVertex, 94, curLF ); break;
		case 95: TransformVertexAsRequired( sVertex, 95, curLF ); break;
		case 96: TransformVertexAsRequired( sVertex, 96, curLF ); break;
		case 97: TransformVertexAsRequired( sVertex, 97, curLF ); break;
		case 98: TransformVertexAsRequired( sVertex, 98, curLF ); break;
		case 99: TransformVertexAsRequired( sVertex, 99, curLF ); break;
		case 100: TransformVertexAsRequired( sVertex, 100, curLF ); break;
		case 101: TransformVertexAsRequired( sVertex, 101, curLF ); break;
		case 102: TransformVertexAsRequired( sVertex, 102, curLF ); break;
		case 103: TransformVertexAsRequired( sVertex, 103, curLF ); break;
		case 104: TransformVertexAsRequired( sVertex, 104, curLF ); break;
		case 105: TransformVertexAsRequired( sVertex, 105, curLF ); break;
		case 106: TransformVertexAsRequired( sVertex, 106, curLF ); break;
		case 107: TransformVertexAsRequired( sVertex, 107, curLF ); break;
		case 108: TransformVertexAsRequired( sVertex, 108, curLF ); break;
		case 109: TransformVertexAsRequired( sVertex, 109, curLF ); break;
		case 110: TransformVertexAsRequired( sVertex, 110, curLF ); break;
		case 111: TransformVertexAsRequired( sVertex, 111, curLF ); break;
		case 112: TransformVertexAsRequired( sVertex, 112, curLF ); break;
		case 113: TransformVertexAsRequired( sVertex, 113, curLF ); break;
		case 114: TransformVertexAsRequired( sVertex, 114, curLF ); break;
		case 115: TransformVertexAsRequired( sVertex, 115, curLF ); break;
		case 116: TransformVertexAsRequired( sVertex, 116, curLF ); break;
		case 117: TransformVertexAsRequired( sVertex, 117, curLF ); break;
		case 118: TransformVertexAsRequired( sVertex, 118, curLF ); break;
		case 119: TransformVertexAsRequired( sVertex, 119, curLF ); break;
		case 120: TransformVertexAsRequired( sVertex, 120, curLF ); break;
		case 121: TransformVertexAsRequired( sVertex, 121, curLF ); break;
		case 122: TransformVertexAsRequired( sVertex, 122, curLF ); break;
		case 123: TransformVertexAsRequired( sVertex, 123, curLF ); break;
		case 124: TransformVertexAsRequired( sVertex, 124, curLF ); break;
		case 125: TransformVertexAsRequired( sVertex, 125, curLF ); break;
		case 126: TransformVertexAsRequired( sVertex, 126, curLF ); break;
		case 127: TransformVertexAsRequired( sVertex, 127, curLF ); break;
		case 128: TransformVertexAsRequired( sVertex, 128, curLF ); break;
		case 129: TransformVertexAsRequired( sVertex, 129, curLF ); break;
		case 130: TransformVertexAsRequired( sVertex, 130, curLF ); break;
		case 131: TransformVertexAsRequired( sVertex, 131, curLF ); break;
		case 132: TransformVertexAsRequired( sVertex, 132, curLF ); break;
		case 133: TransformVertexAsRequired( sVertex, 133, curLF ); break;
		case 134: TransformVertexAsRequired( sVertex, 134, curLF ); break;
		case 135: TransformVertexAsRequired( sVertex, 135, curLF ); break;
		case 136: TransformVertexAsRequired( sVertex, 136, curLF ); break;
		case 137: TransformVertexAsRequired( sVertex, 137, curLF ); break;
		case 138: TransformVertexAsRequired( sVertex, 138, curLF ); break;
		case 139: TransformVertexAsRequired( sVertex, 139, curLF ); break;
		case 140: TransformVertexAsRequired( sVertex, 140, curLF ); break;
		case 141: TransformVertexAsRequired( sVertex, 141, curLF ); break;
		case 142: TransformVertexAsRequired( sVertex, 142, curLF ); break;
		case 143: TransformVertexAsRequired( sVertex, 143, curLF ); break;
		case 144: TransformVertexAsRequired( sVertex, 144, curLF ); break;
		case 145: TransformVertexAsRequired( sVertex, 145, curLF ); break;
		case 146: TransformVertexAsRequired( sVertex, 146, curLF ); break;
		case 147: TransformVertexAsRequired( sVertex, 147, curLF ); break;
		case 148: TransformVertexAsRequired( sVertex, 148, curLF ); break;
		case 149: TransformVertexAsRequired( sVertex, 149, curLF ); break;
		case 150: TransformVertexAsRequired( sVertex, 150, curLF ); break;
		case 151: TransformVertexAsRequired( sVertex, 151, curLF ); break;
		case 152: TransformVertexAsRequired( sVertex, 152, curLF ); break;
		case 153: TransformVertexAsRequired( sVertex, 153, curLF ); break;
		case 154: TransformVertexAsRequired( sVertex, 154, curLF ); break;
		case 155: TransformVertexAsRequired( sVertex, 155, curLF ); break;
		case 156: TransformVertexAsRequired( sVertex, 156, curLF ); break;
		case 157: TransformVertexAsRequired( sVertex, 157, curLF ); break;
		case 158: TransformVertexAsRequired( sVertex, 158, curLF ); break;
		case 159: TransformVertexAsRequired( sVertex, 159, curLF ); break;
		case 160: TransformVertexAsRequired( sVertex, 160, curLF ); break;
		case 161: TransformVertexAsRequired( sVertex, 161, curLF ); break;
		case 162: TransformVertexAsRequired( sVertex, 162, curLF ); break;
		case 163: TransformVertexAsRequired( sVertex, 163, curLF ); break;
		case 164: TransformVertexAsRequired( sVertex, 164, curLF ); break;
		case 165: TransformVertexAsRequired( sVertex, 165, curLF ); break;
		case 166: TransformVertexAsRequired( sVertex, 166, curLF ); break;
		case 167: TransformVertexAsRequired( sVertex, 167, curLF ); break;
		case 168: TransformVertexAsRequired( sVertex, 168, curLF ); break;
		case 169: TransformVertexAsRequired( sVertex, 169, curLF ); break;
		case 170: TransformVertexAsRequired( sVertex, 170, curLF ); break;
		case 171: TransformVertexAsRequired( sVertex, 171, curLF ); break;
		case 172: TransformVertexAsRequired( sVertex, 172, curLF ); break;
		case 173: TransformVertexAsRequired( sVertex, 173, curLF ); break;
		case 174: TransformVertexAsRequired( sVertex, 174, curLF ); break;
		case 175: TransformVertexAsRequired( sVertex, 175, curLF ); break;
		case 176: TransformVertexAsRequired( sVertex, 176, curLF ); break;
		case 177: TransformVertexAsRequired( sVertex, 177, curLF ); break;
		case 178: TransformVertexAsRequired( sVertex, 178, curLF ); break;
		case 179: TransformVertexAsRequired( sVertex, 179, curLF ); break;
		case 180: TransformVertexAsRequired( sVertex, 180, curLF ); break;
		case 181: TransformVertexAsRequired( sVertex, 181, curLF ); break;
		case 182: TransformVertexAsRequired( sVertex, 182, curLF ); break;
		case 183: TransformVertexAsRequired( sVertex, 183, curLF ); break;
		case 184: TransformVertexAsRequired( sVertex, 184, curLF ); break;
		case 185: TransformVertexAsRequired( sVertex, 185, curLF ); break;
		case 186: TransformVertexAsRequired( sVertex, 186, curLF ); break;
		case 187: TransformVertexAsRequired( sVertex, 187, curLF ); break;
		case 188: TransformVertexAsRequired( sVertex, 188, curLF ); break;
		case 189: TransformVertexAsRequired( sVertex, 189, curLF ); break;
		case 190: TransformVertexAsRequired( sVertex, 190, curLF ); break;
		case 191: TransformVertexAsRequired( sVertex, 191, curLF ); break;
		case 192: TransformVertexAsRequired( sVertex, 192, curLF ); break;
		case 193: TransformVertexAsRequired( sVertex, 193, curLF ); break;
		case 194: TransformVertexAsRequired( sVertex, 194, curLF ); break;
		case 195: TransformVertexAsRequired( sVertex, 195, curLF ); break;
		case 196: TransformVertexAsRequired( sVertex, 196, curLF ); break;
		case 197: TransformVertexAsRequired( sVertex, 197, curLF ); break;
		case 198: TransformVertexAsRequired( sVertex, 198, curLF ); break;
		case 199: TransformVertexAsRequired( sVertex, 199, curLF ); break;
		case 200: TransformVertexAsRequired( sVertex, 200, curLF ); break;
		case 201: TransformVertexAsRequired( sVertex, 201, curLF ); break;
		case 202: TransformVertexAsRequired( sVertex, 202, curLF ); break;
		case 203: TransformVertexAsRequired( sVertex, 203, curLF ); break;
		case 204: TransformVertexAsRequired( sVertex, 204, curLF ); break;
		case 205: TransformVertexAsRequired( sVertex, 205, curLF ); break;
		case 206: TransformVertexAsRequired( sVertex, 206, curLF ); break;
		case 207: TransformVertexAsRequired( sVertex, 207, curLF ); break;
		case 208: TransformVertexAsRequired( sVertex, 208, curLF ); break;
		case 209: TransformVertexAsRequired( sVertex, 209, curLF ); break;
		case 210: TransformVertexAsRequired( sVertex, 210, curLF ); break;
		case 211: TransformVertexAsRequired( sVertex, 211, curLF ); break;
		case 212: TransformVertexAsRequired( sVertex, 212, curLF ); break;
		case 213: TransformVertexAsRequired( sVertex, 213, curLF ); break;
		case 214: TransformVertexAsRequired( sVertex, 214, curLF ); break;
		case 215: TransformVertexAsRequired( sVertex, 215, curLF ); break;
		case 216: TransformVertexAsRequired( sVertex, 216, curLF ); break;
		case 217: TransformVertexAsRequired( sVertex, 217, curLF ); break;
		case 218: TransformVertexAsRequired( sVertex, 218, curLF ); break;
		case 219: TransformVertexAsRequired( sVertex, 219, curLF ); break;
		case 220: TransformVertexAsRequired( sVertex, 220, curLF ); break;
		case 221: TransformVertexAsRequired( sVertex, 221, curLF ); break;
		case 222: TransformVertexAsRequired( sVertex, 222, curLF ); break;
		case 223: TransformVertexAsRequired( sVertex, 223, curLF ); break;
		case 224: TransformVertexAsRequired( sVertex, 224, curLF ); break;
		case 225: TransformVertexAsRequired( sVertex, 225, curLF ); break;
		case 226: TransformVertexAsRequired( sVertex, 226, curLF ); break;
		case 227: TransformVertexAsRequired( sVertex, 227, curLF ); break;
		case 228: TransformVertexAsRequired( sVertex, 228, curLF ); break;
		case 229: TransformVertexAsRequired( sVertex, 229, curLF ); break;
		case 230: TransformVertexAsRequired( sVertex, 230, curLF ); break;
		case 231: TransformVertexAsRequired( sVertex, 231, curLF ); break;
		case 232: TransformVertexAsRequired( sVertex, 232, curLF ); break;
		case 233: TransformVertexAsRequired( sVertex, 233, curLF ); break;
		case 234: TransformVertexAsRequired( sVertex, 234, curLF ); break;
		case 235: TransformVertexAsRequired( sVertex, 235, curLF ); break;
		case 236: TransformVertexAsRequired( sVertex, 236, curLF ); break;
		case 237: TransformVertexAsRequired( sVertex, 237, curLF ); break;
		case 238: TransformVertexAsRequired( sVertex, 238, curLF ); break;
		case 239: TransformVertexAsRequired( sVertex, 239, curLF ); break;
		case 240: TransformVertexAsRequired( sVertex, 240, curLF ); break;
		case 241: TransformVertexAsRequired( sVertex, 241, curLF ); break;
		case 242: TransformVertexAsRequired( sVertex, 242, curLF ); break;
		case 243: TransformVertexAsRequired( sVertex, 243, curLF ); break;
		case 244: TransformVertexAsRequired( sVertex, 244, curLF ); break;
		case 245: TransformVertexAsRequired( sVertex, 245, curLF ); break;
		case 246: TransformVertexAsRequired( sVertex, 246, curLF ); break;
		case 247: TransformVertexAsRequired( sVertex, 247, curLF ); break;
		case 248: TransformVertexAsRequired( sVertex, 248, curLF ); break;
		case 249: TransformVertexAsRequired( sVertex, 249, curLF ); break;
		case 250: TransformVertexAsRequired( sVertex, 250, curLF ); break;
		case 251: TransformVertexAsRequired( sVertex, 251, curLF ); break;
		case 252: TransformVertexAsRequired( sVertex, 252, curLF ); break;
		case 253: TransformVertexAsRequired( sVertex, 253, curLF ); break;
		case 254: TransformVertexAsRequired( sVertex, 254, curLF ); break;
		case 255: TransformVertexAsRequired( sVertex, 255, curLF ); break;
		case 256: TransformVertexAsRequired( sVertex, 256, curLF ); break;
		case 257: TransformVertexAsRequired( sVertex, 257, curLF ); break;
		case 258: TransformVertexAsRequired( sVertex, 258, curLF ); break;
		case 259: TransformVertexAsRequired( sVertex, 259, curLF ); break;
		case 260: TransformVertexAsRequired( sVertex, 260, curLF ); break;
		case 261: TransformVertexAsRequired( sVertex, 261, curLF ); break;
		case 262: TransformVertexAsRequired( sVertex, 262, curLF ); break;
		case 263: TransformVertexAsRequired( sVertex, 263, curLF ); break;
		case 264: TransformVertexAsRequired( sVertex, 264, curLF ); break;
		case 265: TransformVertexAsRequired( sVertex, 265, curLF ); break;
		case 266: TransformVertexAsRequired( sVertex, 266, curLF ); break;
		case 267: TransformVertexAsRequired( sVertex, 267, curLF ); break;
		case 268: TransformVertexAsRequired( sVertex, 268, curLF ); break;
		case 269: TransformVertexAsRequired( sVertex, 269, curLF ); break;
		case 270: TransformVertexAsRequired( sVertex, 270, curLF ); break;
		case 271: TransformVertexAsRequired( sVertex, 271, curLF ); break;
		case 272: TransformVertexAsRequired( sVertex, 272, curLF ); break;
		case 273: TransformVertexAsRequired( sVertex, 273, curLF ); break;
		case 274: TransformVertexAsRequired( sVertex, 274, curLF ); break;
		case 275: TransformVertexAsRequired( sVertex, 275, curLF ); break;
		case 276: TransformVertexAsRequired( sVertex, 276, curLF ); break;
		case 277: TransformVertexAsRequired( sVertex, 277, curLF ); break;
		case 278: TransformVertexAsRequired( sVertex, 278, curLF ); break;
		case 279: TransformVertexAsRequired( sVertex, 279, curLF ); break;
		case 280: TransformVertexAsRequired( sVertex, 280, curLF ); break;
		case 281: TransformVertexAsRequired( sVertex, 281, curLF ); break;
		case 282: TransformVertexAsRequired( sVertex, 282, curLF ); break;
		case 283: TransformVertexAsRequired( sVertex, 283, curLF ); break;
		case 284: TransformVertexAsRequired( sVertex, 284, curLF ); break;
		case 285: TransformVertexAsRequired( sVertex, 285, curLF ); break;
		case 286: TransformVertexAsRequired( sVertex, 286, curLF ); break;
		case 287: TransformVertexAsRequired( sVertex, 287, curLF ); break;
		case 288: TransformVertexAsRequired( sVertex, 288, curLF ); break;
		case 289: TransformVertexAsRequired( sVertex, 289, curLF ); break;
		case 290: TransformVertexAsRequired( sVertex, 290, curLF ); break;
		case 291: TransformVertexAsRequired( sVertex, 291, curLF ); break;
		case 292: TransformVertexAsRequired( sVertex, 292, curLF ); break;
		case 293: TransformVertexAsRequired( sVertex, 293, curLF ); break;
		case 294: TransformVertexAsRequired( sVertex, 294, curLF ); break;
		case 295: TransformVertexAsRequired( sVertex, 295, curLF ); break;
		case 296: TransformVertexAsRequired( sVertex, 296, curLF ); break;
		case 297: TransformVertexAsRequired( sVertex, 297, curLF ); break;
		case 298: TransformVertexAsRequired( sVertex, 298, curLF ); break;
		case 299: TransformVertexAsRequired( sVertex, 299, curLF ); break;
		case 300: TransformVertexAsRequired( sVertex, 300, curLF ); break;
		case 301: TransformVertexAsRequired( sVertex, 301, curLF ); break;
		case 302: TransformVertexAsRequired( sVertex, 302, curLF ); break;
		case 303: TransformVertexAsRequired( sVertex, 303, curLF ); break;
		case 304: TransformVertexAsRequired( sVertex, 304, curLF ); break;
		case 305: TransformVertexAsRequired( sVertex, 305, curLF ); break;
		case 306: TransformVertexAsRequired( sVertex, 306, curLF ); break;
		case 307: TransformVertexAsRequired( sVertex, 307, curLF ); break;
		case 308: TransformVertexAsRequired( sVertex, 308, curLF ); break;
		case 309: TransformVertexAsRequired( sVertex, 309, curLF ); break;
		case 310: TransformVertexAsRequired( sVertex, 310, curLF ); break;
		case 311: TransformVertexAsRequired( sVertex, 311, curLF ); break;
		case 312: TransformVertexAsRequired( sVertex, 312, curLF ); break;
		case 313: TransformVertexAsRequired( sVertex, 313, curLF ); break;
		case 314: TransformVertexAsRequired( sVertex, 314, curLF ); break;
		case 315: TransformVertexAsRequired( sVertex, 315, curLF ); break;
		case 316: TransformVertexAsRequired( sVertex, 316, curLF ); break;
		case 317: TransformVertexAsRequired( sVertex, 317, curLF ); break;
		case 318: TransformVertexAsRequired( sVertex, 318, curLF ); break;
		case 319: TransformVertexAsRequired( sVertex, 319, curLF ); break;
		case 320: TransformVertexAsRequired( sVertex, 320, curLF ); break;
		case 321: TransformVertexAsRequired( sVertex, 321, curLF ); break;
		case 322: TransformVertexAsRequired( sVertex, 322, curLF ); break;
		case 323: TransformVertexAsRequired( sVertex, 323, curLF ); break;
		case 324: TransformVertexAsRequired( sVertex, 324, curLF ); break;
		case 325: TransformVertexAsRequired( sVertex, 325, curLF ); break;
		case 326: TransformVertexAsRequired( sVertex, 326, curLF ); break;
		case 327: TransformVertexAsRequired( sVertex, 327, curLF ); break;
		case 328: TransformVertexAsRequired( sVertex, 328, curLF ); break;
		case 329: TransformVertexAsRequired( sVertex, 329, curLF ); break;
		case 330: TransformVertexAsRequired( sVertex, 330, curLF ); break;
		case 331: TransformVertexAsRequired( sVertex, 331, curLF ); break;
		case 332: TransformVertexAsRequired( sVertex, 332, curLF ); break;
		case 333: TransformVertexAsRequired( sVertex, 333, curLF ); break;
		case 334: TransformVertexAsRequired( sVertex, 334, curLF ); break;
		case 335: TransformVertexAsRequired( sVertex, 335, curLF ); break;
		case 336: TransformVertexAsRequired( sVertex, 336, curLF ); break;
		case 337: TransformVertexAsRequired( sVertex, 337, curLF ); break;
		case 338: TransformVertexAsRequired( sVertex, 338, curLF ); break;
		case 339: TransformVertexAsRequired( sVertex, 339, curLF ); break;
		case 340: TransformVertexAsRequired( sVertex, 340, curLF ); break;
		case 341: TransformVertexAsRequired( sVertex, 341, curLF ); break;
		case 342: TransformVertexAsRequired( sVertex, 342, curLF ); break;
		case 343: TransformVertexAsRequired( sVertex, 343, curLF ); break;
		case 344: TransformVertexAsRequired( sVertex, 344, curLF ); break;
		case 345: TransformVertexAsRequired( sVertex, 345, curLF ); break;
		case 346: TransformVertexAsRequired( sVertex, 346, curLF ); break;
		case 347: TransformVertexAsRequired( sVertex, 347, curLF ); break;
		case 348: TransformVertexAsRequired( sVertex, 348, curLF ); break;
		case 349: TransformVertexAsRequired( sVertex, 349, curLF ); break;
		case 350: TransformVertexAsRequired( sVertex, 350, curLF ); break;
		case 351: TransformVertexAsRequired( sVertex, 351, curLF ); break;
		case 352: TransformVertexAsRequired( sVertex, 352, curLF ); break;
		case 353: TransformVertexAsRequired( sVertex, 353, curLF ); break;
		case 354: TransformVertexAsRequired( sVertex, 354, curLF ); break;
		case 355: TransformVertexAsRequired( sVertex, 355, curLF ); break;
		case 356: TransformVertexAsRequired( sVertex, 356, curLF ); break;
		case 357: TransformVertexAsRequired( sVertex, 357, curLF ); break;
		case 358: TransformVertexAsRequired( sVertex, 358, curLF ); break;
		case 359: TransformVertexAsRequired( sVertex, 359, curLF ); break;
		case 360: TransformVertexAsRequired( sVertex, 360, curLF ); break;
		case 361: TransformVertexAsRequired( sVertex, 361, curLF ); break;
		case 362: TransformVertexAsRequired( sVertex, 362, curLF ); break;
		case 363: TransformVertexAsRequired( sVertex, 363, curLF ); break;
		case 364: TransformVertexAsRequired( sVertex, 364, curLF ); break;
		case 365: TransformVertexAsRequired( sVertex, 365, curLF ); break;
		case 366: TransformVertexAsRequired( sVertex, 366, curLF ); break;
		case 367: TransformVertexAsRequired( sVertex, 367, curLF ); break;
		case 368: TransformVertexAsRequired( sVertex, 368, curLF ); break;
		case 369: TransformVertexAsRequired( sVertex, 369, curLF ); break;
		case 370: TransformVertexAsRequired( sVertex, 370, curLF ); break;
		case 371: TransformVertexAsRequired( sVertex, 371, curLF ); break;
		case 372: TransformVertexAsRequired( sVertex, 372, curLF ); break;
		case 373: TransformVertexAsRequired( sVertex, 373, curLF ); break;
		case 374: TransformVertexAsRequired( sVertex, 374, curLF ); break;
		case 375: TransformVertexAsRequired( sVertex, 375, curLF ); break;
		case 376: TransformVertexAsRequired( sVertex, 376, curLF ); break;
		case 377: TransformVertexAsRequired( sVertex, 377, curLF ); break;
		case 378: TransformVertexAsRequired( sVertex, 378, curLF ); break;
		case 379: TransformVertexAsRequired( sVertex, 379, curLF ); break;
		case 380: TransformVertexAsRequired( sVertex, 380, curLF ); break;
		case 381: TransformVertexAsRequired( sVertex, 381, curLF ); break;
		case 382: TransformVertexAsRequired( sVertex, 382, curLF ); break;
		case 383: TransformVertexAsRequired( sVertex, 383, curLF ); break;
		case 384: TransformVertexAsRequired( sVertex, 384, curLF ); break;
		case 385: TransformVertexAsRequired( sVertex, 385, curLF ); break;
		case 386: TransformVertexAsRequired( sVertex, 386, curLF ); break;
		case 387: TransformVertexAsRequired( sVertex, 387, curLF ); break;
		case 388: TransformVertexAsRequired( sVertex, 388, curLF ); break;
		case 389: TransformVertexAsRequired( sVertex, 389, curLF ); break;
		case 390: TransformVertexAsRequired( sVertex, 390, curLF ); break;
		case 391: TransformVertexAsRequired( sVertex, 391, curLF ); break;
		case 392: TransformVertexAsRequired( sVertex, 392, curLF ); break;
		case 393: TransformVertexAsRequired( sVertex, 393, curLF ); break;
		case 394: TransformVertexAsRequired( sVertex, 394, curLF ); break;
		case 395: TransformVertexAsRequired( sVertex, 395, curLF ); break;
		case 396: TransformVertexAsRequired( sVertex, 396, curLF ); break;
		case 397: TransformVertexAsRequired( sVertex, 397, curLF ); break;
		case 398: TransformVertexAsRequired( sVertex, 398, curLF ); break;
		case 399: TransformVertexAsRequired( sVertex, 399, curLF ); break;
		case 400: TransformVertexAsRequired( sVertex, 400, curLF ); break;
		case 401: TransformVertexAsRequired( sVertex, 401, curLF ); break;
		case 402: TransformVertexAsRequired( sVertex, 402, curLF ); break;
		case 403: TransformVertexAsRequired( sVertex, 403, curLF ); break;
		case 404: TransformVertexAsRequired( sVertex, 404, curLF ); break;
		case 405: TransformVertexAsRequired( sVertex, 405, curLF ); break;
		case 406: TransformVertexAsRequired( sVertex, 406, curLF ); break;
		case 407: TransformVertexAsRequired( sVertex, 407, curLF ); break;
		case 408: TransformVertexAsRequired( sVertex, 408, curLF ); break;
		case 409: TransformVertexAsRequired( sVertex, 409, curLF ); break;
		case 410: TransformVertexAsRequired( sVertex, 410, curLF ); break;
		case 411: TransformVertexAsRequired( sVertex, 411, curLF ); break;
		case 412: TransformVertexAsRequired( sVertex, 412, curLF ); break;
		case 413: TransformVertexAsRequired( sVertex, 413, curLF ); break;
		case 414: TransformVertexAsRequired( sVertex, 414, curLF ); break;
		case 415: TransformVertexAsRequired( sVertex, 415, curLF ); break;
		case 416: TransformVertexAsRequired( sVertex, 416, curLF ); break;
		case 417: TransformVertexAsRequired( sVertex, 417, curLF ); break;
		case 418: TransformVertexAsRequired( sVertex, 418, curLF ); break;
		case 419: TransformVertexAsRequired( sVertex, 419, curLF ); break;
		case 420: TransformVertexAsRequired( sVertex, 420, curLF ); break;
		case 421: TransformVertexAsRequired( sVertex, 421, curLF ); break;
		case 422: TransformVertexAsRequired( sVertex, 422, curLF ); break;
		case 423: TransformVertexAsRequired( sVertex, 423, curLF ); break;
		case 424: TransformVertexAsRequired( sVertex, 424, curLF ); break;
		case 425: TransformVertexAsRequired( sVertex, 425, curLF ); break;
		case 426: TransformVertexAsRequired( sVertex, 426, curLF ); break;
		case 427: TransformVertexAsRequired( sVertex, 427, curLF ); break;
		case 428: TransformVertexAsRequired( sVertex, 428, curLF ); break;
		case 429: TransformVertexAsRequired( sVertex, 429, curLF ); break;
		case 430: TransformVertexAsRequired( sVertex, 430, curLF ); break;
		case 431: TransformVertexAsRequired( sVertex, 431, curLF ); break;
		case 432: TransformVertexAsRequired( sVertex, 432, curLF ); break;
		case 433: TransformVertexAsRequired( sVertex, 433, curLF ); break;
		case 434: TransformVertexAsRequired( sVertex, 434, curLF ); break;
		case 435: TransformVertexAsRequired( sVertex, 435, curLF ); break;
		case 436: TransformVertexAsRequired( sVertex, 436, curLF ); break;
		case 437: TransformVertexAsRequired( sVertex, 437, curLF ); break;
		case 438: TransformVertexAsRequired( sVertex, 438, curLF ); break;
		case 439: TransformVertexAsRequired( sVertex, 439, curLF ); break;
		case 440: TransformVertexAsRequired( sVertex, 440, curLF ); break;
		case 441: TransformVertexAsRequired( sVertex, 441, curLF ); break;
		case 442: TransformVertexAsRequired( sVertex, 442, curLF ); break;
		case 443: TransformVertexAsRequired( sVertex, 443, curLF ); break;
		case 444: TransformVertexAsRequired( sVertex, 444, curLF ); break;
		case 445: TransformVertexAsRequired( sVertex, 445, curLF ); break;
		case 446: TransformVertexAsRequired( sVertex, 446, curLF ); break;
		case 447: TransformVertexAsRequired( sVertex, 447, curLF ); break;
		case 448: TransformVertexAsRequired( sVertex, 448, curLF ); break;
		case 449: TransformVertexAsRequired( sVertex, 449, curLF ); break;
		case 450: TransformVertexAsRequired( sVertex, 450, curLF ); break;
		case 451: TransformVertexAsRequired( sVertex, 451, curLF ); break;
		case 452: TransformVertexAsRequired( sVertex, 452, curLF ); break;
		case 453: TransformVertexAsRequired( sVertex, 453, curLF ); break;
		case 454: TransformVertexAsRequired( sVertex, 454, curLF ); break;
		case 455: TransformVertexAsRequired( sVertex, 455, curLF ); break;
		case 456: TransformVertexAsRequired( sVertex, 456, curLF ); break;
		case 457: TransformVertexAsRequired( sVertex, 457, curLF ); break;
		case 458: TransformVertexAsRequired( sVertex, 458, curLF ); break;
		case 459: TransformVertexAsRequired( sVertex, 459, curLF ); break;
		case 460: TransformVertexAsRequired( sVertex, 460, curLF ); break;
		case 461: TransformVertexAsRequired( sVertex, 461, curLF ); break;
		case 462: TransformVertexAsRequired( sVertex, 462, curLF ); break;
		case 463: TransformVertexAsRequired( sVertex, 463, curLF ); break;
		case 464: TransformVertexAsRequired( sVertex, 464, curLF ); break;
		case 465: TransformVertexAsRequired( sVertex, 465, curLF ); break;
		case 466: TransformVertexAsRequired( sVertex, 466, curLF ); break;
		case 467: TransformVertexAsRequired( sVertex, 467, curLF ); break;
		case 468: TransformVertexAsRequired( sVertex, 468, curLF ); break;
		case 469: TransformVertexAsRequired( sVertex, 469, curLF ); break;
		case 470: TransformVertexAsRequired( sVertex, 470, curLF ); break;
		case 471: TransformVertexAsRequired( sVertex, 471, curLF ); break;
		case 472: TransformVertexAsRequired( sVertex, 472, curLF ); break;
		case 473: TransformVertexAsRequired( sVertex, 473, curLF ); break;
		case 474: TransformVertexAsRequired( sVertex, 474, curLF ); break;
		case 475: TransformVertexAsRequired( sVertex, 475, curLF ); break;
		case 476: TransformVertexAsRequired( sVertex, 476, curLF ); break;
		case 477: TransformVertexAsRequired( sVertex, 477, curLF ); break;
		case 478: TransformVertexAsRequired( sVertex, 478, curLF ); break;
		case 479: TransformVertexAsRequired( sVertex, 479, curLF ); break;
		case 480: TransformVertexAsRequired( sVertex, 480, curLF ); break;
		case 481: TransformVertexAsRequired( sVertex, 481, curLF ); break;
		case 482: TransformVertexAsRequired( sVertex, 482, curLF ); break;
		case 483: TransformVertexAsRequired( sVertex, 483, curLF ); break;
		case 484: TransformVertexAsRequired( sVertex, 484, curLF ); break;
		case 485: TransformVertexAsRequired( sVertex, 485, curLF ); break;
		case 486: TransformVertexAsRequired( sVertex, 486, curLF ); break;
		case 487: TransformVertexAsRequired( sVertex, 487, curLF ); break;
		case 488: TransformVertexAsRequired( sVertex, 488, curLF ); break;
		case 489: TransformVertexAsRequired( sVertex, 489, curLF ); break;
		case 490: TransformVertexAsRequired( sVertex, 490, curLF ); break;
		case 491: TransformVertexAsRequired( sVertex, 491, curLF ); break;
		case 492: TransformVertexAsRequired( sVertex, 492, curLF ); break;
		case 493: TransformVertexAsRequired( sVertex, 493, curLF ); break;
		case 494: TransformVertexAsRequired( sVertex, 494, curLF ); break;
		case 495: TransformVertexAsRequired( sVertex, 495, curLF ); break;
		case 496: TransformVertexAsRequired( sVertex, 496, curLF ); break;
		case 497: TransformVertexAsRequired( sVertex, 497, curLF ); break;
		case 498: TransformVertexAsRequired( sVertex, 498, curLF ); break;
		case 499: TransformVertexAsRequired( sVertex, 499, curLF ); break;
		case 500: TransformVertexAsRequired( sVertex, 500, curLF ); break;
		case 501: TransformVertexAsRequired( sVertex, 501, curLF ); break;
		case 502: TransformVertexAsRequired( sVertex, 502, curLF ); break;
		case 503: TransformVertexAsRequired( sVertex, 503, curLF ); break;
		case 504: TransformVertexAsRequired( sVertex, 504, curLF ); break;
		case 505: TransformVertexAsRequired( sVertex, 505, curLF ); break;
		case 506: TransformVertexAsRequired( sVertex, 506, curLF ); break;
		case 507: TransformVertexAsRequired( sVertex, 507, curLF ); break;
		case 508: TransformVertexAsRequired( sVertex, 508, curLF ); break;
		case 509: TransformVertexAsRequired( sVertex, 509, curLF ); break;
		case 510: TransformVertexAsRequired( sVertex, 510, curLF ); break;
		case 511: TransformVertexAsRequired( sVertex, 511, curLF ); break;
//DeadCode JON 30Oct00 		case 512: TransformVertexAsRequired( sVertex, 512, curLF ); break;
//DeadCode JON 30Oct00 		case 513: TransformVertexAsRequired( sVertex, 513, curLF ); break;
//DeadCode JON 30Oct00 		case 514: TransformVertexAsRequired( sVertex, 514, curLF ); break;
//DeadCode JON 30Oct00 		case 515: TransformVertexAsRequired( sVertex, 515, curLF ); break;
//DeadCode JON 30Oct00 		case 516: TransformVertexAsRequired( sVertex, 516, curLF ); break;
//DeadCode JON 30Oct00 		case 517: TransformVertexAsRequired( sVertex, 517, curLF ); break;
//DeadCode JON 30Oct00 		case 518: TransformVertexAsRequired( sVertex, 518, curLF ); break;
//DeadCode JON 30Oct00 		case 519: TransformVertexAsRequired( sVertex, 519, curLF ); break;
//DeadCode JON 30Oct00 		case 520: TransformVertexAsRequired( sVertex, 520, curLF ); break;
//DeadCode JON 30Oct00 		case 521: TransformVertexAsRequired( sVertex, 521, curLF ); break;
//DeadCode JON 30Oct00 		case 522: TransformVertexAsRequired( sVertex, 522, curLF ); break;
//DeadCode JON 30Oct00 		case 523: TransformVertexAsRequired( sVertex, 523, curLF ); break;
//DeadCode JON 30Oct00 		case 524: TransformVertexAsRequired( sVertex, 524, curLF ); break;
//DeadCode JON 30Oct00 		case 525: TransformVertexAsRequired( sVertex, 525, curLF ); break;
//DeadCode JON 30Oct00 		case 526: TransformVertexAsRequired( sVertex, 526, curLF ); break;
//DeadCode JON 30Oct00 		case 527: TransformVertexAsRequired( sVertex, 527, curLF ); break;
//DeadCode JON 30Oct00 		case 528: TransformVertexAsRequired( sVertex, 528, curLF ); break;
//DeadCode JON 30Oct00 		case 529: TransformVertexAsRequired( sVertex, 529, curLF ); break;
//DeadCode JON 30Oct00 		case 530: TransformVertexAsRequired( sVertex, 530, curLF ); break;
//DeadCode JON 30Oct00 		case 531: TransformVertexAsRequired( sVertex, 531, curLF ); break;
//DeadCode JON 30Oct00 		case 532: TransformVertexAsRequired( sVertex, 532, curLF ); break;
//DeadCode JON 30Oct00 		case 533: TransformVertexAsRequired( sVertex, 533, curLF ); break;
//DeadCode JON 30Oct00 		case 534: TransformVertexAsRequired( sVertex, 534, curLF ); break;
//DeadCode JON 30Oct00 		case 535: TransformVertexAsRequired( sVertex, 535, curLF ); break;
//DeadCode JON 30Oct00 		case 536: TransformVertexAsRequired( sVertex, 536, curLF ); break;
//DeadCode JON 30Oct00 		case 537: TransformVertexAsRequired( sVertex, 537, curLF ); break;
//DeadCode JON 30Oct00 		case 538: TransformVertexAsRequired( sVertex, 538, curLF ); break;
//DeadCode JON 30Oct00 		case 539: TransformVertexAsRequired( sVertex, 539, curLF ); break;
//DeadCode JON 30Oct00 		case 540: TransformVertexAsRequired( sVertex, 540, curLF ); break;
//DeadCode JON 30Oct00 		case 541: TransformVertexAsRequired( sVertex, 541, curLF ); break;
//DeadCode JON 30Oct00 		case 542: TransformVertexAsRequired( sVertex, 542, curLF ); break;
//DeadCode JON 30Oct00 		case 543: TransformVertexAsRequired( sVertex, 543, curLF ); break;
//DeadCode JON 30Oct00 		case 544: TransformVertexAsRequired( sVertex, 544, curLF ); break;
//DeadCode JON 30Oct00 		case 545: TransformVertexAsRequired( sVertex, 545, curLF ); break;
//DeadCode JON 30Oct00 		case 546: TransformVertexAsRequired( sVertex, 546, curLF ); break;
//DeadCode JON 30Oct00 		case 547: TransformVertexAsRequired( sVertex, 547, curLF ); break;
//DeadCode JON 30Oct00 		case 548: TransformVertexAsRequired( sVertex, 548, curLF ); break;
//DeadCode JON 30Oct00 		case 549: TransformVertexAsRequired( sVertex, 549, curLF ); break;
//DeadCode JON 30Oct00 		case 550: TransformVertexAsRequired( sVertex, 550, curLF ); break;
//DeadCode JON 30Oct00 		case 551: TransformVertexAsRequired( sVertex, 551, curLF ); break;
//DeadCode JON 30Oct00 		case 552: TransformVertexAsRequired( sVertex, 552, curLF ); break;
//DeadCode JON 30Oct00 		case 553: TransformVertexAsRequired( sVertex, 553, curLF ); break;
//DeadCode JON 30Oct00 		case 554: TransformVertexAsRequired( sVertex, 554, curLF ); break;
//DeadCode JON 30Oct00 		case 555: TransformVertexAsRequired( sVertex, 555, curLF ); break;
//DeadCode JON 30Oct00 		case 556: TransformVertexAsRequired( sVertex, 556, curLF ); break;
//DeadCode JON 30Oct00 		case 557: TransformVertexAsRequired( sVertex, 557, curLF ); break;
//DeadCode JON 30Oct00 		case 558: TransformVertexAsRequired( sVertex, 558, curLF ); break;
//DeadCode JON 30Oct00 		case 559: TransformVertexAsRequired( sVertex, 559, curLF ); break;
//DeadCode JON 30Oct00 		case 560: TransformVertexAsRequired( sVertex, 560, curLF ); break;
//DeadCode JON 30Oct00 		case 561: TransformVertexAsRequired( sVertex, 561, curLF ); break;
//DeadCode JON 30Oct00 		case 562: TransformVertexAsRequired( sVertex, 562, curLF ); break;
//DeadCode JON 30Oct00 		case 563: TransformVertexAsRequired( sVertex, 563, curLF ); break;
//DeadCode JON 30Oct00 		case 564: TransformVertexAsRequired( sVertex, 564, curLF ); break;
//DeadCode JON 30Oct00 		case 565: TransformVertexAsRequired( sVertex, 565, curLF ); break;
//DeadCode JON 30Oct00 		case 566: TransformVertexAsRequired( sVertex, 566, curLF ); break;
//DeadCode JON 30Oct00 		case 567: TransformVertexAsRequired( sVertex, 567, curLF ); break;
//DeadCode JON 30Oct00 		case 568: TransformVertexAsRequired( sVertex, 568, curLF ); break;
//DeadCode JON 30Oct00 		case 569: TransformVertexAsRequired( sVertex, 569, curLF ); break;
//DeadCode JON 30Oct00 		case 570: TransformVertexAsRequired( sVertex, 570, curLF ); break;
//DeadCode JON 30Oct00 		case 571: TransformVertexAsRequired( sVertex, 571, curLF ); break;
//DeadCode JON 30Oct00 		case 572: TransformVertexAsRequired( sVertex, 572, curLF ); break;
//DeadCode JON 30Oct00 		case 573: TransformVertexAsRequired( sVertex, 573, curLF ); break;
//DeadCode JON 30Oct00 		case 574: TransformVertexAsRequired( sVertex, 574, curLF ); break;
//DeadCode JON 30Oct00 		case 575: TransformVertexAsRequired( sVertex, 575, curLF ); break;
//DeadCode JON 30Oct00 		case 576: TransformVertexAsRequired( sVertex, 576, curLF ); break;
//DeadCode JON 30Oct00 		case 577: TransformVertexAsRequired( sVertex, 577, curLF ); break;
//DeadCode JON 30Oct00 		case 578: TransformVertexAsRequired( sVertex, 578, curLF ); break;
//DeadCode JON 30Oct00 		case 579: TransformVertexAsRequired( sVertex, 579, curLF ); break;
//DeadCode JON 30Oct00 		case 580: TransformVertexAsRequired( sVertex, 580, curLF ); break;
//DeadCode JON 30Oct00 		case 581: TransformVertexAsRequired( sVertex, 581, curLF ); break;
//DeadCode JON 30Oct00 		case 582: TransformVertexAsRequired( sVertex, 582, curLF ); break;
//DeadCode JON 30Oct00 		case 583: TransformVertexAsRequired( sVertex, 583, curLF ); break;
//DeadCode JON 30Oct00 		case 584: TransformVertexAsRequired( sVertex, 584, curLF ); break;
//DeadCode JON 30Oct00 		case 585: TransformVertexAsRequired( sVertex, 585, curLF ); break;
//DeadCode JON 30Oct00 		case 586: TransformVertexAsRequired( sVertex, 586, curLF ); break;
//DeadCode JON 30Oct00 		case 587: TransformVertexAsRequired( sVertex, 587, curLF ); break;
//DeadCode JON 30Oct00 		case 588: TransformVertexAsRequired( sVertex, 588, curLF ); break;
//DeadCode JON 30Oct00 		case 589: TransformVertexAsRequired( sVertex, 589, curLF ); break;
//DeadCode JON 30Oct00 		case 590: TransformVertexAsRequired( sVertex, 590, curLF ); break;
//DeadCode JON 30Oct00 		case 591: TransformVertexAsRequired( sVertex, 591, curLF ); break;
//DeadCode JON 30Oct00 		case 592: TransformVertexAsRequired( sVertex, 592, curLF ); break;
//DeadCode JON 30Oct00 		case 593: TransformVertexAsRequired( sVertex, 593, curLF ); break;
//DeadCode JON 30Oct00 		case 594: TransformVertexAsRequired( sVertex, 594, curLF ); break;
//DeadCode JON 30Oct00 		case 595: TransformVertexAsRequired( sVertex, 595, curLF ); break;
//DeadCode JON 30Oct00 		case 596: TransformVertexAsRequired( sVertex, 596, curLF ); break;
//DeadCode JON 30Oct00 		case 597: TransformVertexAsRequired( sVertex, 597, curLF ); break;
//DeadCode JON 30Oct00 		case 598: TransformVertexAsRequired( sVertex, 598, curLF ); break;
//DeadCode JON 30Oct00 		case 599: TransformVertexAsRequired( sVertex, 599, curLF ); break;
//DeadCode JON 30Oct00 		case 600: TransformVertexAsRequired( sVertex, 600, curLF ); break;
//DeadCode JON 30Oct00 		case 601: TransformVertexAsRequired( sVertex, 601, curLF ); break;
//DeadCode JON 30Oct00 		case 602: TransformVertexAsRequired( sVertex, 602, curLF ); break;
//DeadCode JON 30Oct00 		case 603: TransformVertexAsRequired( sVertex, 603, curLF ); break;
//DeadCode JON 30Oct00 		case 604: TransformVertexAsRequired( sVertex, 604, curLF ); break;
//DeadCode JON 30Oct00 		case 605: TransformVertexAsRequired( sVertex, 605, curLF ); break;
//DeadCode JON 30Oct00 		case 606: TransformVertexAsRequired( sVertex, 606, curLF ); break;
//DeadCode JON 30Oct00 		case 607: TransformVertexAsRequired( sVertex, 607, curLF ); break;
//DeadCode JON 30Oct00 		case 608: TransformVertexAsRequired( sVertex, 608, curLF ); break;
//DeadCode JON 30Oct00 		case 609: TransformVertexAsRequired( sVertex, 609, curLF ); break;
//DeadCode JON 30Oct00 		case 610: TransformVertexAsRequired( sVertex, 610, curLF ); break;
//DeadCode JON 30Oct00 		case 611: TransformVertexAsRequired( sVertex, 611, curLF ); break;
//DeadCode JON 30Oct00 		case 612: TransformVertexAsRequired( sVertex, 612, curLF ); break;
//DeadCode JON 30Oct00 		case 613: TransformVertexAsRequired( sVertex, 613, curLF ); break;
//DeadCode JON 30Oct00 		case 614: TransformVertexAsRequired( sVertex, 614, curLF ); break;
//DeadCode JON 30Oct00 		case 615: TransformVertexAsRequired( sVertex, 615, curLF ); break;
//DeadCode JON 30Oct00 		case 616: TransformVertexAsRequired( sVertex, 616, curLF ); break;
//DeadCode JON 30Oct00 		case 617: TransformVertexAsRequired( sVertex, 617, curLF ); break;
//DeadCode JON 30Oct00 		case 618: TransformVertexAsRequired( sVertex, 618, curLF ); break;
//DeadCode JON 30Oct00 		case 619: TransformVertexAsRequired( sVertex, 619, curLF ); break;
//DeadCode JON 30Oct00 		case 620: TransformVertexAsRequired( sVertex, 620, curLF ); break;
//DeadCode JON 30Oct00 		case 621: TransformVertexAsRequired( sVertex, 621, curLF ); break;
//DeadCode JON 30Oct00 		case 622: TransformVertexAsRequired( sVertex, 622, curLF ); break;
//DeadCode JON 30Oct00 		case 623: TransformVertexAsRequired( sVertex, 623, curLF ); break;
//DeadCode JON 30Oct00 		case 624: TransformVertexAsRequired( sVertex, 624, curLF ); break;
//DeadCode JON 30Oct00 		case 625: TransformVertexAsRequired( sVertex, 625, curLF ); break;
//DeadCode JON 30Oct00 		case 626: TransformVertexAsRequired( sVertex, 626, curLF ); break;
//DeadCode JON 30Oct00 		case 627: TransformVertexAsRequired( sVertex, 627, curLF ); break;
//DeadCode JON 30Oct00 		case 628: TransformVertexAsRequired( sVertex, 628, curLF ); break;
//DeadCode JON 30Oct00 		case 629: TransformVertexAsRequired( sVertex, 629, curLF ); break;
//DeadCode JON 30Oct00 		case 630: TransformVertexAsRequired( sVertex, 630, curLF ); break;
//DeadCode JON 30Oct00 		case 631: TransformVertexAsRequired( sVertex, 631, curLF ); break;
//DeadCode JON 30Oct00 		case 632: TransformVertexAsRequired( sVertex, 632, curLF ); break;
//DeadCode JON 30Oct00 		case 633: TransformVertexAsRequired( sVertex, 633, curLF ); break;
//DeadCode JON 30Oct00 		case 634: TransformVertexAsRequired( sVertex, 634, curLF ); break;
//DeadCode JON 30Oct00 		case 635: TransformVertexAsRequired( sVertex, 635, curLF ); break;
//DeadCode JON 30Oct00 		case 636: TransformVertexAsRequired( sVertex, 636, curLF ); break;
//DeadCode JON 30Oct00 		case 637: TransformVertexAsRequired( sVertex, 637, curLF ); break;
//DeadCode JON 30Oct00 		case 638: TransformVertexAsRequired( sVertex, 638, curLF ); break;
//DeadCode JON 30Oct00 		case 639: TransformVertexAsRequired( sVertex, 639, curLF ); break;
//DeadCode JON 30Oct00 		case 640: TransformVertexAsRequired( sVertex, 640, curLF ); break;
//DeadCode JON 30Oct00 		case 641: TransformVertexAsRequired( sVertex, 641, curLF ); break;
//DeadCode JON 30Oct00 		case 642: TransformVertexAsRequired( sVertex, 642, curLF ); break;
//DeadCode JON 30Oct00 		case 643: TransformVertexAsRequired( sVertex, 643, curLF ); break;
//DeadCode JON 30Oct00 		case 644: TransformVertexAsRequired( sVertex, 644, curLF ); break;
//DeadCode JON 30Oct00 		case 645: TransformVertexAsRequired( sVertex, 645, curLF ); break;
//DeadCode JON 30Oct00 		case 646: TransformVertexAsRequired( sVertex, 646, curLF ); break;
//DeadCode JON 30Oct00 		case 647: TransformVertexAsRequired( sVertex, 647, curLF ); break;
//DeadCode JON 30Oct00 		case 648: TransformVertexAsRequired( sVertex, 648, curLF ); break;
//DeadCode JON 30Oct00 		case 649: TransformVertexAsRequired( sVertex, 649, curLF ); break;
//DeadCode JON 30Oct00 		case 650: TransformVertexAsRequired( sVertex, 650, curLF ); break;
//DeadCode JON 30Oct00 		case 651: TransformVertexAsRequired( sVertex, 651, curLF ); break;
//DeadCode JON 30Oct00 		case 652: TransformVertexAsRequired( sVertex, 652, curLF ); break;
//DeadCode JON 30Oct00 		case 653: TransformVertexAsRequired( sVertex, 653, curLF ); break;
//DeadCode JON 30Oct00 		case 654: TransformVertexAsRequired( sVertex, 654, curLF ); break;
//DeadCode JON 30Oct00 		case 655: TransformVertexAsRequired( sVertex, 655, curLF ); break;
//DeadCode JON 30Oct00 		case 656: TransformVertexAsRequired( sVertex, 656, curLF ); break;
//DeadCode JON 30Oct00 		case 657: TransformVertexAsRequired( sVertex, 657, curLF ); break;
//DeadCode JON 30Oct00 		case 658: TransformVertexAsRequired( sVertex, 658, curLF ); break;
//DeadCode JON 30Oct00 		case 659: TransformVertexAsRequired( sVertex, 659, curLF ); break;
//DeadCode JON 30Oct00 		case 660: TransformVertexAsRequired( sVertex, 660, curLF ); break;
//DeadCode JON 30Oct00 		case 661: TransformVertexAsRequired( sVertex, 661, curLF ); break;
//DeadCode JON 30Oct00 		case 662: TransformVertexAsRequired( sVertex, 662, curLF ); break;
//DeadCode JON 30Oct00 		case 663: TransformVertexAsRequired( sVertex, 663, curLF ); break;
//DeadCode JON 30Oct00 		case 664: TransformVertexAsRequired( sVertex, 664, curLF ); break;
//DeadCode JON 30Oct00 		case 665: TransformVertexAsRequired( sVertex, 665, curLF ); break;
//DeadCode JON 30Oct00 		case 666: TransformVertexAsRequired( sVertex, 666, curLF ); break;
//DeadCode JON 30Oct00 		case 667: TransformVertexAsRequired( sVertex, 667, curLF ); break;
//DeadCode JON 30Oct00 		case 668: TransformVertexAsRequired( sVertex, 668, curLF ); break;
//DeadCode JON 30Oct00 		case 669: TransformVertexAsRequired( sVertex, 669, curLF ); break;
//DeadCode JON 30Oct00 		case 670: TransformVertexAsRequired( sVertex, 670, curLF ); break;
//DeadCode JON 30Oct00 		case 671: TransformVertexAsRequired( sVertex, 671, curLF ); break;
//DeadCode JON 30Oct00 		case 672: TransformVertexAsRequired( sVertex, 672, curLF ); break;
//DeadCode JON 30Oct00 		case 673: TransformVertexAsRequired( sVertex, 673, curLF ); break;
//DeadCode JON 30Oct00 		case 674: TransformVertexAsRequired( sVertex, 674, curLF ); break;
//DeadCode JON 30Oct00 		case 675: TransformVertexAsRequired( sVertex, 675, curLF ); break;
//DeadCode JON 30Oct00 		case 676: TransformVertexAsRequired( sVertex, 676, curLF ); break;
//DeadCode JON 30Oct00 		case 677: TransformVertexAsRequired( sVertex, 677, curLF ); break;
//DeadCode JON 30Oct00 		case 678: TransformVertexAsRequired( sVertex, 678, curLF ); break;
//DeadCode JON 30Oct00 		case 679: TransformVertexAsRequired( sVertex, 679, curLF ); break;
//DeadCode JON 30Oct00 		case 680: TransformVertexAsRequired( sVertex, 680, curLF ); break;
//DeadCode JON 30Oct00 		case 681: TransformVertexAsRequired( sVertex, 681, curLF ); break;
//DeadCode JON 30Oct00 		case 682: TransformVertexAsRequired( sVertex, 682, curLF ); break;
//DeadCode JON 30Oct00 		case 683: TransformVertexAsRequired( sVertex, 683, curLF ); break;
//DeadCode JON 30Oct00 		case 684: TransformVertexAsRequired( sVertex, 684, curLF ); break;
//DeadCode JON 30Oct00 		case 685: TransformVertexAsRequired( sVertex, 685, curLF ); break;
//DeadCode JON 30Oct00 		case 686: TransformVertexAsRequired( sVertex, 686, curLF ); break;
//DeadCode JON 30Oct00 		case 687: TransformVertexAsRequired( sVertex, 687, curLF ); break;
//DeadCode JON 30Oct00 		case 688: TransformVertexAsRequired( sVertex, 688, curLF ); break;
//DeadCode JON 30Oct00 		case 689: TransformVertexAsRequired( sVertex, 689, curLF ); break;
//DeadCode JON 30Oct00 		case 690: TransformVertexAsRequired( sVertex, 690, curLF ); break;
//DeadCode JON 30Oct00 		case 691: TransformVertexAsRequired( sVertex, 691, curLF ); break;
//DeadCode JON 30Oct00 		case 692: TransformVertexAsRequired( sVertex, 692, curLF ); break;
//DeadCode JON 30Oct00 		case 693: TransformVertexAsRequired( sVertex, 693, curLF ); break;
//DeadCode JON 30Oct00 		case 694: TransformVertexAsRequired( sVertex, 694, curLF ); break;
//DeadCode JON 30Oct00 		case 695: TransformVertexAsRequired( sVertex, 695, curLF ); break;
//DeadCode JON 30Oct00 		case 696: TransformVertexAsRequired( sVertex, 696, curLF ); break;
//DeadCode JON 30Oct00 		case 697: TransformVertexAsRequired( sVertex, 697, curLF ); break;
//DeadCode JON 30Oct00 		case 698: TransformVertexAsRequired( sVertex, 698, curLF ); break;
//DeadCode JON 30Oct00 		case 699: TransformVertexAsRequired( sVertex, 699, curLF ); break;
//DeadCode JON 30Oct00 		case 700: TransformVertexAsRequired( sVertex, 700, curLF ); break;
//DeadCode JON 30Oct00 		case 701: TransformVertexAsRequired( sVertex, 701, curLF ); break;
//DeadCode JON 30Oct00 		case 702: TransformVertexAsRequired( sVertex, 702, curLF ); break;
//DeadCode JON 30Oct00 		case 703: TransformVertexAsRequired( sVertex, 703, curLF ); break;
//DeadCode JON 30Oct00 		case 704: TransformVertexAsRequired( sVertex, 704, curLF ); break;
//DeadCode JON 30Oct00 		case 705: TransformVertexAsRequired( sVertex, 705, curLF ); break;
//DeadCode JON 30Oct00 		case 706: TransformVertexAsRequired( sVertex, 706, curLF ); break;
//DeadCode JON 30Oct00 		case 707: TransformVertexAsRequired( sVertex, 707, curLF ); break;
//DeadCode JON 30Oct00 		case 708: TransformVertexAsRequired( sVertex, 708, curLF ); break;
//DeadCode JON 30Oct00 		case 709: TransformVertexAsRequired( sVertex, 709, curLF ); break;
//DeadCode JON 30Oct00 		case 710: TransformVertexAsRequired( sVertex, 710, curLF ); break;
//DeadCode JON 30Oct00 		case 711: TransformVertexAsRequired( sVertex, 711, curLF ); break;
//DeadCode JON 30Oct00 		case 712: TransformVertexAsRequired( sVertex, 712, curLF ); break;
//DeadCode JON 30Oct00 		case 713: TransformVertexAsRequired( sVertex, 713, curLF ); break;
//DeadCode JON 30Oct00 		case 714: TransformVertexAsRequired( sVertex, 714, curLF ); break;
//DeadCode JON 30Oct00 		case 715: TransformVertexAsRequired( sVertex, 715, curLF ); break;
//DeadCode JON 30Oct00 		case 716: TransformVertexAsRequired( sVertex, 716, curLF ); break;
//DeadCode JON 30Oct00 		case 717: TransformVertexAsRequired( sVertex, 717, curLF ); break;
//DeadCode JON 30Oct00 		case 718: TransformVertexAsRequired( sVertex, 718, curLF ); break;
//DeadCode JON 30Oct00 		case 719: TransformVertexAsRequired( sVertex, 719, curLF ); break;
//DeadCode JON 30Oct00 		case 720: TransformVertexAsRequired( sVertex, 720, curLF ); break;
//DeadCode JON 30Oct00 		case 721: TransformVertexAsRequired( sVertex, 721, curLF ); break;
//DeadCode JON 30Oct00 		case 722: TransformVertexAsRequired( sVertex, 722, curLF ); break;
//DeadCode JON 30Oct00 		case 723: TransformVertexAsRequired( sVertex, 723, curLF ); break;
//DeadCode JON 30Oct00 		case 724: TransformVertexAsRequired( sVertex, 724, curLF ); break;
//DeadCode JON 30Oct00 		case 725: TransformVertexAsRequired( sVertex, 725, curLF ); break;
//DeadCode JON 30Oct00 		case 726: TransformVertexAsRequired( sVertex, 726, curLF ); break;
//DeadCode JON 30Oct00 		case 727: TransformVertexAsRequired( sVertex, 727, curLF ); break;
//DeadCode JON 30Oct00 		case 728: TransformVertexAsRequired( sVertex, 728, curLF ); break;
//DeadCode JON 30Oct00 		case 729: TransformVertexAsRequired( sVertex, 729, curLF ); break;
//DeadCode JON 30Oct00 		case 730: TransformVertexAsRequired( sVertex, 730, curLF ); break;
//DeadCode JON 30Oct00 		case 731: TransformVertexAsRequired( sVertex, 731, curLF ); break;
//DeadCode JON 30Oct00 		case 732: TransformVertexAsRequired( sVertex, 732, curLF ); break;
//DeadCode JON 30Oct00 		case 733: TransformVertexAsRequired( sVertex, 733, curLF ); break;
//DeadCode JON 30Oct00 		case 734: TransformVertexAsRequired( sVertex, 734, curLF ); break;
//DeadCode JON 30Oct00 		case 735: TransformVertexAsRequired( sVertex, 735, curLF ); break;
//DeadCode JON 30Oct00 		case 736: TransformVertexAsRequired( sVertex, 736, curLF ); break;
//DeadCode JON 30Oct00 		case 737: TransformVertexAsRequired( sVertex, 737, curLF ); break;
//DeadCode JON 30Oct00 		case 738: TransformVertexAsRequired( sVertex, 738, curLF ); break;
//DeadCode JON 30Oct00 		case 739: TransformVertexAsRequired( sVertex, 739, curLF ); break;
//DeadCode JON 30Oct00 		case 740: TransformVertexAsRequired( sVertex, 740, curLF ); break;
//DeadCode JON 30Oct00 		case 741: TransformVertexAsRequired( sVertex, 741, curLF ); break;
//DeadCode JON 30Oct00 		case 742: TransformVertexAsRequired( sVertex, 742, curLF ); break;
//DeadCode JON 30Oct00 		case 743: TransformVertexAsRequired( sVertex, 743, curLF ); break;
//DeadCode JON 30Oct00 		case 744: TransformVertexAsRequired( sVertex, 744, curLF ); break;
//DeadCode JON 30Oct00 		case 745: TransformVertexAsRequired( sVertex, 745, curLF ); break;
//DeadCode JON 30Oct00 		case 746: TransformVertexAsRequired( sVertex, 746, curLF ); break;
//DeadCode JON 30Oct00 		case 747: TransformVertexAsRequired( sVertex, 747, curLF ); break;
//DeadCode JON 30Oct00 		case 748: TransformVertexAsRequired( sVertex, 748, curLF ); break;
//DeadCode JON 30Oct00 		case 749: TransformVertexAsRequired( sVertex, 749, curLF ); break;
//DeadCode JON 30Oct00 		case 750: TransformVertexAsRequired( sVertex, 750, curLF ); break;
//DeadCode JON 30Oct00 		case 751: TransformVertexAsRequired( sVertex, 751, curLF ); break;
//DeadCode JON 30Oct00 		case 752: TransformVertexAsRequired( sVertex, 752, curLF ); break;
//DeadCode JON 30Oct00 		case 753: TransformVertexAsRequired( sVertex, 753, curLF ); break;
//DeadCode JON 30Oct00 		case 754: TransformVertexAsRequired( sVertex, 754, curLF ); break;
//DeadCode JON 30Oct00 		case 755: TransformVertexAsRequired( sVertex, 755, curLF ); break;
//DeadCode JON 30Oct00 		case 756: TransformVertexAsRequired( sVertex, 756, curLF ); break;
//DeadCode JON 30Oct00 		case 757: TransformVertexAsRequired( sVertex, 757, curLF ); break;
//DeadCode JON 30Oct00 		case 758: TransformVertexAsRequired( sVertex, 758, curLF ); break;
//DeadCode JON 30Oct00 		case 759: TransformVertexAsRequired( sVertex, 759, curLF ); break;
//DeadCode JON 30Oct00 		case 760: TransformVertexAsRequired( sVertex, 760, curLF ); break;
//DeadCode JON 30Oct00 		case 761: TransformVertexAsRequired( sVertex, 761, curLF ); break;
//DeadCode JON 30Oct00 		case 762: TransformVertexAsRequired( sVertex, 762, curLF ); break;
//DeadCode JON 30Oct00 		case 763: TransformVertexAsRequired( sVertex, 763, curLF ); break;
//DeadCode JON 30Oct00 		case 764: TransformVertexAsRequired( sVertex, 764, curLF ); break;
//DeadCode JON 30Oct00 		case 765: TransformVertexAsRequired( sVertex, 765, curLF ); break;
//DeadCode JON 30Oct00 		case 766: TransformVertexAsRequired( sVertex, 766, curLF ); break;
//DeadCode JON 30Oct00 		case 767: TransformVertexAsRequired( sVertex, 767, curLF ); break;
//DeadCode JON 30Oct00 		case 768: TransformVertexAsRequired( sVertex, 768, curLF ); break;
//DeadCode JON 30Oct00 		case 769: TransformVertexAsRequired( sVertex, 769, curLF ); break;
//DeadCode JON 30Oct00 		case 770: TransformVertexAsRequired( sVertex, 770, curLF ); break;
//DeadCode JON 30Oct00 		case 771: TransformVertexAsRequired( sVertex, 771, curLF ); break;
//DeadCode JON 30Oct00 		case 772: TransformVertexAsRequired( sVertex, 772, curLF ); break;
//DeadCode JON 30Oct00 		case 773: TransformVertexAsRequired( sVertex, 773, curLF ); break;
//DeadCode JON 30Oct00 		case 774: TransformVertexAsRequired( sVertex, 774, curLF ); break;
//DeadCode JON 30Oct00 		case 775: TransformVertexAsRequired( sVertex, 775, curLF ); break;
//DeadCode JON 30Oct00 		case 776: TransformVertexAsRequired( sVertex, 776, curLF ); break;
//DeadCode JON 30Oct00 		case 777: TransformVertexAsRequired( sVertex, 777, curLF ); break;
//DeadCode JON 30Oct00 		case 778: TransformVertexAsRequired( sVertex, 778, curLF ); break;
//DeadCode JON 30Oct00 		case 779: TransformVertexAsRequired( sVertex, 779, curLF ); break;
//DeadCode JON 30Oct00 		case 780: TransformVertexAsRequired( sVertex, 780, curLF ); break;
//DeadCode JON 30Oct00 		case 781: TransformVertexAsRequired( sVertex, 781, curLF ); break;
//DeadCode JON 30Oct00 		case 782: TransformVertexAsRequired( sVertex, 782, curLF ); break;
//DeadCode JON 30Oct00 		case 783: TransformVertexAsRequired( sVertex, 783, curLF ); break;
//DeadCode JON 30Oct00 		case 784: TransformVertexAsRequired( sVertex, 784, curLF ); break;
//DeadCode JON 30Oct00 		case 785: TransformVertexAsRequired( sVertex, 785, curLF ); break;
//DeadCode JON 30Oct00 		case 786: TransformVertexAsRequired( sVertex, 786, curLF ); break;
//DeadCode JON 30Oct00 		case 787: TransformVertexAsRequired( sVertex, 787, curLF ); break;
//DeadCode JON 30Oct00 		case 788: TransformVertexAsRequired( sVertex, 788, curLF ); break;
//DeadCode JON 30Oct00 		case 789: TransformVertexAsRequired( sVertex, 789, curLF ); break;
//DeadCode JON 30Oct00 		case 790: TransformVertexAsRequired( sVertex, 790, curLF ); break;
//DeadCode JON 30Oct00 		case 791: TransformVertexAsRequired( sVertex, 791, curLF ); break;
//DeadCode JON 30Oct00 		case 792: TransformVertexAsRequired( sVertex, 792, curLF ); break;
//DeadCode JON 30Oct00 		case 793: TransformVertexAsRequired( sVertex, 793, curLF ); break;
//DeadCode JON 30Oct00 		case 794: TransformVertexAsRequired( sVertex, 794, curLF ); break;
//DeadCode JON 30Oct00 		case 795: TransformVertexAsRequired( sVertex, 795, curLF ); break;
//DeadCode JON 30Oct00 		case 796: TransformVertexAsRequired( sVertex, 796, curLF ); break;
//DeadCode JON 30Oct00 		case 797: TransformVertexAsRequired( sVertex, 797, curLF ); break;
//DeadCode JON 30Oct00 		case 798: TransformVertexAsRequired( sVertex, 798, curLF ); break;
//DeadCode JON 30Oct00 		case 799: TransformVertexAsRequired( sVertex, 799, curLF ); break;
//DeadCode JON 30Oct00 		case 800: TransformVertexAsRequired( sVertex, 800, curLF ); break;
//DeadCode JON 30Oct00 		case 801: TransformVertexAsRequired( sVertex, 801, curLF ); break;
//DeadCode JON 30Oct00 		case 802: TransformVertexAsRequired( sVertex, 802, curLF ); break;
//DeadCode JON 30Oct00 		case 803: TransformVertexAsRequired( sVertex, 803, curLF ); break;
//DeadCode JON 30Oct00 		case 804: TransformVertexAsRequired( sVertex, 804, curLF ); break;
//DeadCode JON 30Oct00 		case 805: TransformVertexAsRequired( sVertex, 805, curLF ); break;
//DeadCode JON 30Oct00 		case 806: TransformVertexAsRequired( sVertex, 806, curLF ); break;
//DeadCode JON 30Oct00 		case 807: TransformVertexAsRequired( sVertex, 807, curLF ); break;
//DeadCode JON 30Oct00 		case 808: TransformVertexAsRequired( sVertex, 808, curLF ); break;
//DeadCode JON 30Oct00 		case 809: TransformVertexAsRequired( sVertex, 809, curLF ); break;
//DeadCode JON 30Oct00 		case 810: TransformVertexAsRequired( sVertex, 810, curLF ); break;
//DeadCode JON 30Oct00 		case 811: TransformVertexAsRequired( sVertex, 811, curLF ); break;
//DeadCode JON 30Oct00 		case 812: TransformVertexAsRequired( sVertex, 812, curLF ); break;
//DeadCode JON 30Oct00 		case 813: TransformVertexAsRequired( sVertex, 813, curLF ); break;
//DeadCode JON 30Oct00 		case 814: TransformVertexAsRequired( sVertex, 814, curLF ); break;
//DeadCode JON 30Oct00 		case 815: TransformVertexAsRequired( sVertex, 815, curLF ); break;
//DeadCode JON 30Oct00 		case 816: TransformVertexAsRequired( sVertex, 816, curLF ); break;
//DeadCode JON 30Oct00 		case 817: TransformVertexAsRequired( sVertex, 817, curLF ); break;
//DeadCode JON 30Oct00 		case 818: TransformVertexAsRequired( sVertex, 818, curLF ); break;
//DeadCode JON 30Oct00 		case 819: TransformVertexAsRequired( sVertex, 819, curLF ); break;
//DeadCode JON 30Oct00 		case 820: TransformVertexAsRequired( sVertex, 820, curLF ); break;
//DeadCode JON 30Oct00 		case 821: TransformVertexAsRequired( sVertex, 821, curLF ); break;
//DeadCode JON 30Oct00 		case 822: TransformVertexAsRequired( sVertex, 822, curLF ); break;
//DeadCode JON 30Oct00 		case 823: TransformVertexAsRequired( sVertex, 823, curLF ); break;
//DeadCode JON 30Oct00 		case 824: TransformVertexAsRequired( sVertex, 824, curLF ); break;
//DeadCode JON 30Oct00 		case 825: TransformVertexAsRequired( sVertex, 825, curLF ); break;
//DeadCode JON 30Oct00 		case 826: TransformVertexAsRequired( sVertex, 826, curLF ); break;
//DeadCode JON 30Oct00 		case 827: TransformVertexAsRequired( sVertex, 827, curLF ); break;
//DeadCode JON 30Oct00 		case 828: TransformVertexAsRequired( sVertex, 828, curLF ); break;
//DeadCode JON 30Oct00 		case 829: TransformVertexAsRequired( sVertex, 829, curLF ); break;
//DeadCode JON 30Oct00 		case 830: TransformVertexAsRequired( sVertex, 830, curLF ); break;
//DeadCode JON 30Oct00 		case 831: TransformVertexAsRequired( sVertex, 831, curLF ); break;
//DeadCode JON 30Oct00 		case 832: TransformVertexAsRequired( sVertex, 832, curLF ); break;
//DeadCode JON 30Oct00 		case 833: TransformVertexAsRequired( sVertex, 833, curLF ); break;
//DeadCode JON 30Oct00 		case 834: TransformVertexAsRequired( sVertex, 834, curLF ); break;
//DeadCode JON 30Oct00 		case 835: TransformVertexAsRequired( sVertex, 835, curLF ); break;
//DeadCode JON 30Oct00 		case 836: TransformVertexAsRequired( sVertex, 836, curLF ); break;
//DeadCode JON 30Oct00 		case 837: TransformVertexAsRequired( sVertex, 837, curLF ); break;
//DeadCode JON 30Oct00 		case 838: TransformVertexAsRequired( sVertex, 838, curLF ); break;
//DeadCode JON 30Oct00 		case 839: TransformVertexAsRequired( sVertex, 839, curLF ); break;
//DeadCode JON 30Oct00 		case 840: TransformVertexAsRequired( sVertex, 840, curLF ); break;
//DeadCode JON 30Oct00 		case 841: TransformVertexAsRequired( sVertex, 841, curLF ); break;
//DeadCode JON 30Oct00 		case 842: TransformVertexAsRequired( sVertex, 842, curLF ); break;
//DeadCode JON 30Oct00 		case 843: TransformVertexAsRequired( sVertex, 843, curLF ); break;
//DeadCode JON 30Oct00 		case 844: TransformVertexAsRequired( sVertex, 844, curLF ); break;
//DeadCode JON 30Oct00 		case 845: TransformVertexAsRequired( sVertex, 845, curLF ); break;
//DeadCode JON 30Oct00 		case 846: TransformVertexAsRequired( sVertex, 846, curLF ); break;
//DeadCode JON 30Oct00 		case 847: TransformVertexAsRequired( sVertex, 847, curLF ); break;
//DeadCode JON 30Oct00 		case 848: TransformVertexAsRequired( sVertex, 848, curLF ); break;
//DeadCode JON 30Oct00 		case 849: TransformVertexAsRequired( sVertex, 849, curLF ); break;
//DeadCode JON 30Oct00 		case 850: TransformVertexAsRequired( sVertex, 850, curLF ); break;
//DeadCode JON 30Oct00 		case 851: TransformVertexAsRequired( sVertex, 851, curLF ); break;
//DeadCode JON 30Oct00 		case 852: TransformVertexAsRequired( sVertex, 852, curLF ); break;
//DeadCode JON 30Oct00 		case 853: TransformVertexAsRequired( sVertex, 853, curLF ); break;
//DeadCode JON 30Oct00 		case 854: TransformVertexAsRequired( sVertex, 854, curLF ); break;
//DeadCode JON 30Oct00 		case 855: TransformVertexAsRequired( sVertex, 855, curLF ); break;
//DeadCode JON 30Oct00 		case 856: TransformVertexAsRequired( sVertex, 856, curLF ); break;
//DeadCode JON 30Oct00 		case 857: TransformVertexAsRequired( sVertex, 857, curLF ); break;
//DeadCode JON 30Oct00 		case 858: TransformVertexAsRequired( sVertex, 858, curLF ); break;
//DeadCode JON 30Oct00 		case 859: TransformVertexAsRequired( sVertex, 859, curLF ); break;
//DeadCode JON 30Oct00 		case 860: TransformVertexAsRequired( sVertex, 860, curLF ); break;
//DeadCode JON 30Oct00 		case 861: TransformVertexAsRequired( sVertex, 861, curLF ); break;
//DeadCode JON 30Oct00 		case 862: TransformVertexAsRequired( sVertex, 862, curLF ); break;
//DeadCode JON 30Oct00 		case 863: TransformVertexAsRequired( sVertex, 863, curLF ); break;
//DeadCode JON 30Oct00 		case 864: TransformVertexAsRequired( sVertex, 864, curLF ); break;
//DeadCode JON 30Oct00 		case 865: TransformVertexAsRequired( sVertex, 865, curLF ); break;
//DeadCode JON 30Oct00 		case 866: TransformVertexAsRequired( sVertex, 866, curLF ); break;
//DeadCode JON 30Oct00 		case 867: TransformVertexAsRequired( sVertex, 867, curLF ); break;
//DeadCode JON 30Oct00 		case 868: TransformVertexAsRequired( sVertex, 868, curLF ); break;
//DeadCode JON 30Oct00 		case 869: TransformVertexAsRequired( sVertex, 869, curLF ); break;
//DeadCode JON 30Oct00 		case 870: TransformVertexAsRequired( sVertex, 870, curLF ); break;
//DeadCode JON 30Oct00 		case 871: TransformVertexAsRequired( sVertex, 871, curLF ); break;
//DeadCode JON 30Oct00 		case 872: TransformVertexAsRequired( sVertex, 872, curLF ); break;
//DeadCode JON 30Oct00 		case 873: TransformVertexAsRequired( sVertex, 873, curLF ); break;
//DeadCode JON 30Oct00 		case 874: TransformVertexAsRequired( sVertex, 874, curLF ); break;
//DeadCode JON 30Oct00 		case 875: TransformVertexAsRequired( sVertex, 875, curLF ); break;
//DeadCode JON 30Oct00 		case 876: TransformVertexAsRequired( sVertex, 876, curLF ); break;
//DeadCode JON 30Oct00 		case 877: TransformVertexAsRequired( sVertex, 877, curLF ); break;
//DeadCode JON 30Oct00 		case 878: TransformVertexAsRequired( sVertex, 878, curLF ); break;
//DeadCode JON 30Oct00 		case 879: TransformVertexAsRequired( sVertex, 879, curLF ); break;
//DeadCode JON 30Oct00 		case 880: TransformVertexAsRequired( sVertex, 880, curLF ); break;
//DeadCode JON 30Oct00 		case 881: TransformVertexAsRequired( sVertex, 881, curLF ); break;
//DeadCode JON 30Oct00 		case 882: TransformVertexAsRequired( sVertex, 882, curLF ); break;
//DeadCode JON 30Oct00 		case 883: TransformVertexAsRequired( sVertex, 883, curLF ); break;
//DeadCode JON 30Oct00 		case 884: TransformVertexAsRequired( sVertex, 884, curLF ); break;
//DeadCode JON 30Oct00 		case 885: TransformVertexAsRequired( sVertex, 885, curLF ); break;
//DeadCode JON 30Oct00 		case 886: TransformVertexAsRequired( sVertex, 886, curLF ); break;
//DeadCode JON 30Oct00 		case 887: TransformVertexAsRequired( sVertex, 887, curLF ); break;
//DeadCode JON 30Oct00 		case 888: TransformVertexAsRequired( sVertex, 888, curLF ); break;
//DeadCode JON 30Oct00 		case 889: TransformVertexAsRequired( sVertex, 889, curLF ); break;
//DeadCode JON 30Oct00 		case 890: TransformVertexAsRequired( sVertex, 890, curLF ); break;
//DeadCode JON 30Oct00 		case 891: TransformVertexAsRequired( sVertex, 891, curLF ); break;
//DeadCode JON 30Oct00 		case 892: TransformVertexAsRequired( sVertex, 892, curLF ); break;
//DeadCode JON 30Oct00 		case 893: TransformVertexAsRequired( sVertex, 893, curLF ); break;
//DeadCode JON 30Oct00 		case 894: TransformVertexAsRequired( sVertex, 894, curLF ); break;
//DeadCode JON 30Oct00 		case 895: TransformVertexAsRequired( sVertex, 895, curLF ); break;
//DeadCode JON 30Oct00 		case 896: TransformVertexAsRequired( sVertex, 896, curLF ); break;
//DeadCode JON 30Oct00 		case 897: TransformVertexAsRequired( sVertex, 897, curLF ); break;
//DeadCode JON 30Oct00 		case 898: TransformVertexAsRequired( sVertex, 898, curLF ); break;
//DeadCode JON 30Oct00 		case 899: TransformVertexAsRequired( sVertex, 899, curLF ); break;
//DeadCode JON 30Oct00 		case 900: TransformVertexAsRequired( sVertex, 900, curLF ); break;
//DeadCode JON 30Oct00 		case 901: TransformVertexAsRequired( sVertex, 901, curLF ); break;
//DeadCode JON 30Oct00 		case 902: TransformVertexAsRequired( sVertex, 902, curLF ); break;
//DeadCode JON 30Oct00 		case 903: TransformVertexAsRequired( sVertex, 903, curLF ); break;
//DeadCode JON 30Oct00 		case 904: TransformVertexAsRequired( sVertex, 904, curLF ); break;
//DeadCode JON 30Oct00 		case 905: TransformVertexAsRequired( sVertex, 905, curLF ); break;
//DeadCode JON 30Oct00 		case 906: TransformVertexAsRequired( sVertex, 906, curLF ); break;
//DeadCode JON 30Oct00 		case 907: TransformVertexAsRequired( sVertex, 907, curLF ); break;
//DeadCode JON 30Oct00 		case 908: TransformVertexAsRequired( sVertex, 908, curLF ); break;
//DeadCode JON 30Oct00 		case 909: TransformVertexAsRequired( sVertex, 909, curLF ); break;
//DeadCode JON 30Oct00 		case 910: TransformVertexAsRequired( sVertex, 910, curLF ); break;
//DeadCode JON 30Oct00 		case 911: TransformVertexAsRequired( sVertex, 911, curLF ); break;
//DeadCode JON 30Oct00 		case 912: TransformVertexAsRequired( sVertex, 912, curLF ); break;
//DeadCode JON 30Oct00 		case 913: TransformVertexAsRequired( sVertex, 913, curLF ); break;
//DeadCode JON 30Oct00 		case 914: TransformVertexAsRequired( sVertex, 914, curLF ); break;
//DeadCode JON 30Oct00 		case 915: TransformVertexAsRequired( sVertex, 915, curLF ); break;
//DeadCode JON 30Oct00 		case 916: TransformVertexAsRequired( sVertex, 916, curLF ); break;
//DeadCode JON 30Oct00 		case 917: TransformVertexAsRequired( sVertex, 917, curLF ); break;
//DeadCode JON 30Oct00 		case 918: TransformVertexAsRequired( sVertex, 918, curLF ); break;
//DeadCode JON 30Oct00 		case 919: TransformVertexAsRequired( sVertex, 919, curLF ); break;
//DeadCode JON 30Oct00 		case 920: TransformVertexAsRequired( sVertex, 920, curLF ); break;
//DeadCode JON 30Oct00 		case 921: TransformVertexAsRequired( sVertex, 921, curLF ); break;
//DeadCode JON 30Oct00 		case 922: TransformVertexAsRequired( sVertex, 922, curLF ); break;
//DeadCode JON 30Oct00 		case 923: TransformVertexAsRequired( sVertex, 923, curLF ); break;
//DeadCode JON 30Oct00 		case 924: TransformVertexAsRequired( sVertex, 924, curLF ); break;
//DeadCode JON 30Oct00 		case 925: TransformVertexAsRequired( sVertex, 925, curLF ); break;
//DeadCode JON 30Oct00 		case 926: TransformVertexAsRequired( sVertex, 926, curLF ); break;
//DeadCode JON 30Oct00 		case 927: TransformVertexAsRequired( sVertex, 927, curLF ); break;
//DeadCode JON 30Oct00 		case 928: TransformVertexAsRequired( sVertex, 928, curLF ); break;
//DeadCode JON 30Oct00 		case 929: TransformVertexAsRequired( sVertex, 929, curLF ); break;
//DeadCode JON 30Oct00 		case 930: TransformVertexAsRequired( sVertex, 930, curLF ); break;
//DeadCode JON 30Oct00 		case 931: TransformVertexAsRequired( sVertex, 931, curLF ); break;
//DeadCode JON 30Oct00 		case 932: TransformVertexAsRequired( sVertex, 932, curLF ); break;
//DeadCode JON 30Oct00 		case 933: TransformVertexAsRequired( sVertex, 933, curLF ); break;
//DeadCode JON 30Oct00 		case 934: TransformVertexAsRequired( sVertex, 934, curLF ); break;
//DeadCode JON 30Oct00 		case 935: TransformVertexAsRequired( sVertex, 935, curLF ); break;
//DeadCode JON 30Oct00 		case 936: TransformVertexAsRequired( sVertex, 936, curLF ); break;
//DeadCode JON 30Oct00 		case 937: TransformVertexAsRequired( sVertex, 937, curLF ); break;
//DeadCode JON 30Oct00 		case 938: TransformVertexAsRequired( sVertex, 938, curLF ); break;
//DeadCode JON 30Oct00 		case 939: TransformVertexAsRequired( sVertex, 939, curLF ); break;
//DeadCode JON 30Oct00 		case 940: TransformVertexAsRequired( sVertex, 940, curLF ); break;
//DeadCode JON 30Oct00 		case 941: TransformVertexAsRequired( sVertex, 941, curLF ); break;
//DeadCode JON 30Oct00 		case 942: TransformVertexAsRequired( sVertex, 942, curLF ); break;
//DeadCode JON 30Oct00 		case 943: TransformVertexAsRequired( sVertex, 943, curLF ); break;
//DeadCode JON 30Oct00 		case 944: TransformVertexAsRequired( sVertex, 944, curLF ); break;
//DeadCode JON 30Oct00 		case 945: TransformVertexAsRequired( sVertex, 945, curLF ); break;
//DeadCode JON 30Oct00 		case 946: TransformVertexAsRequired( sVertex, 946, curLF ); break;
//DeadCode JON 30Oct00 		case 947: TransformVertexAsRequired( sVertex, 947, curLF ); break;
//DeadCode JON 30Oct00 		case 948: TransformVertexAsRequired( sVertex, 948, curLF ); break;
//DeadCode JON 30Oct00 		case 949: TransformVertexAsRequired( sVertex, 949, curLF ); break;
//DeadCode JON 30Oct00 		case 950: TransformVertexAsRequired( sVertex, 950, curLF ); break;
//DeadCode JON 30Oct00 		case 951: TransformVertexAsRequired( sVertex, 951, curLF ); break;
//DeadCode JON 30Oct00 		case 952: TransformVertexAsRequired( sVertex, 952, curLF ); break;
//DeadCode JON 30Oct00 		case 953: TransformVertexAsRequired( sVertex, 953, curLF ); break;
//DeadCode JON 30Oct00 		case 954: TransformVertexAsRequired( sVertex, 954, curLF ); break;
//DeadCode JON 30Oct00 		case 955: TransformVertexAsRequired( sVertex, 955, curLF ); break;
//DeadCode JON 30Oct00 		case 956: TransformVertexAsRequired( sVertex, 956, curLF ); break;
//DeadCode JON 30Oct00 		case 957: TransformVertexAsRequired( sVertex, 957, curLF ); break;
//DeadCode JON 30Oct00 		case 958: TransformVertexAsRequired( sVertex, 958, curLF ); break;
//DeadCode JON 30Oct00 		case 959: TransformVertexAsRequired( sVertex, 959, curLF ); break;
//DeadCode JON 30Oct00 		case 960: TransformVertexAsRequired( sVertex, 960, curLF ); break;
//DeadCode JON 30Oct00 		case 961: TransformVertexAsRequired( sVertex, 961, curLF ); break;
//DeadCode JON 30Oct00 		case 962: TransformVertexAsRequired( sVertex, 962, curLF ); break;
//DeadCode JON 30Oct00 		case 963: TransformVertexAsRequired( sVertex, 963, curLF ); break;
//DeadCode JON 30Oct00 		case 964: TransformVertexAsRequired( sVertex, 964, curLF ); break;
//DeadCode JON 30Oct00 		case 965: TransformVertexAsRequired( sVertex, 965, curLF ); break;
//DeadCode JON 30Oct00 		case 966: TransformVertexAsRequired( sVertex, 966, curLF ); break;
//DeadCode JON 30Oct00 		case 967: TransformVertexAsRequired( sVertex, 967, curLF ); break;
//DeadCode JON 30Oct00 		case 968: TransformVertexAsRequired( sVertex, 968, curLF ); break;
//DeadCode JON 30Oct00 		case 969: TransformVertexAsRequired( sVertex, 969, curLF ); break;
//DeadCode JON 30Oct00 		case 970: TransformVertexAsRequired( sVertex, 970, curLF ); break;
//DeadCode JON 30Oct00 		case 971: TransformVertexAsRequired( sVertex, 971, curLF ); break;
//DeadCode JON 30Oct00 		case 972: TransformVertexAsRequired( sVertex, 972, curLF ); break;
//DeadCode JON 30Oct00 		case 973: TransformVertexAsRequired( sVertex, 973, curLF ); break;
//DeadCode JON 30Oct00 		case 974: TransformVertexAsRequired( sVertex, 974, curLF ); break;
//DeadCode JON 30Oct00 		case 975: TransformVertexAsRequired( sVertex, 975, curLF ); break;
//DeadCode JON 30Oct00 		case 976: TransformVertexAsRequired( sVertex, 976, curLF ); break;
//DeadCode JON 30Oct00 		case 977: TransformVertexAsRequired( sVertex, 977, curLF ); break;
//DeadCode JON 30Oct00 		case 978: TransformVertexAsRequired( sVertex, 978, curLF ); break;
//DeadCode JON 30Oct00 		case 979: TransformVertexAsRequired( sVertex, 979, curLF ); break;
//DeadCode JON 30Oct00 		case 980: TransformVertexAsRequired( sVertex, 980, curLF ); break;
//DeadCode JON 30Oct00 		case 981: TransformVertexAsRequired( sVertex, 981, curLF ); break;
//DeadCode JON 30Oct00 		case 982: TransformVertexAsRequired( sVertex, 982, curLF ); break;
//DeadCode JON 30Oct00 		case 983: TransformVertexAsRequired( sVertex, 983, curLF ); break;
//DeadCode JON 30Oct00 		case 984: TransformVertexAsRequired( sVertex, 984, curLF ); break;
//DeadCode JON 30Oct00 		case 985: TransformVertexAsRequired( sVertex, 985, curLF ); break;
//DeadCode JON 30Oct00 		case 986: TransformVertexAsRequired( sVertex, 986, curLF ); break;
//DeadCode JON 30Oct00 		case 987: TransformVertexAsRequired( sVertex, 987, curLF ); break;
//DeadCode JON 30Oct00 		case 988: TransformVertexAsRequired( sVertex, 988, curLF ); break;
//DeadCode JON 30Oct00 		case 989: TransformVertexAsRequired( sVertex, 989, curLF ); break;
//DeadCode JON 30Oct00 		case 990: TransformVertexAsRequired( sVertex, 990, curLF ); break;
//DeadCode JON 30Oct00 		case 991: TransformVertexAsRequired( sVertex, 991, curLF ); break;
//DeadCode JON 30Oct00 		case 992: TransformVertexAsRequired( sVertex, 992, curLF ); break;
//DeadCode JON 30Oct00 		case 993: TransformVertexAsRequired( sVertex, 993, curLF ); break;
//DeadCode JON 30Oct00 		case 994: TransformVertexAsRequired( sVertex, 994, curLF ); break;
//DeadCode JON 30Oct00 		case 995: TransformVertexAsRequired( sVertex, 995, curLF ); break;
//DeadCode JON 30Oct00 		case 996: TransformVertexAsRequired( sVertex, 996, curLF ); break;
//DeadCode JON 30Oct00 		case 997: TransformVertexAsRequired( sVertex, 997, curLF ); break;
//DeadCode JON 30Oct00 		case 998: TransformVertexAsRequired( sVertex, 998, curLF ); break;
//DeadCode JON 30Oct00 		case 999: TransformVertexAsRequired( sVertex, 999, curLF ); break;
//DeadCode JON 30Oct00 		case 1000: TransformVertexAsRequired( sVertex, 1000, curLF ); break;
//DeadCode JON 30Oct00 		case 1001: TransformVertexAsRequired( sVertex, 1001, curLF ); break;
//DeadCode JON 30Oct00 		case 1002: TransformVertexAsRequired( sVertex, 1002, curLF ); break;
//DeadCode JON 30Oct00 		case 1003: TransformVertexAsRequired( sVertex, 1003, curLF ); break;
//DeadCode JON 30Oct00 		case 1004: TransformVertexAsRequired( sVertex, 1004, curLF ); break;
//DeadCode JON 30Oct00 		case 1005: TransformVertexAsRequired( sVertex, 1005, curLF ); break;
//DeadCode JON 30Oct00 		case 1006: TransformVertexAsRequired( sVertex, 1006, curLF ); break;
//DeadCode JON 30Oct00 		case 1007: TransformVertexAsRequired( sVertex, 1007, curLF ); break;
//DeadCode JON 30Oct00 		case 1008: TransformVertexAsRequired( sVertex, 1008, curLF ); break;
//DeadCode JON 30Oct00 		case 1009: TransformVertexAsRequired( sVertex, 1009, curLF ); break;
//DeadCode JON 30Oct00 		case 1010: TransformVertexAsRequired( sVertex, 1010, curLF ); break;
//DeadCode JON 30Oct00 		case 1011: TransformVertexAsRequired( sVertex, 1011, curLF ); break;
//DeadCode JON 30Oct00 		case 1012: TransformVertexAsRequired( sVertex, 1012, curLF ); break;
//DeadCode JON 30Oct00 		case 1013: TransformVertexAsRequired( sVertex, 1013, curLF ); break;
//DeadCode JON 30Oct00 		case 1014: TransformVertexAsRequired( sVertex, 1014, curLF ); break;
//DeadCode JON 30Oct00 		case 1015: TransformVertexAsRequired( sVertex, 1015, curLF ); break;
//DeadCode JON 30Oct00 		case 1016: TransformVertexAsRequired( sVertex, 1016, curLF ); break;
//DeadCode JON 30Oct00 		case 1017: TransformVertexAsRequired( sVertex, 1017, curLF ); break;
//DeadCode JON 30Oct00 		case 1018: TransformVertexAsRequired( sVertex, 1018, curLF ); break;
//DeadCode JON 30Oct00 		case 1019: TransformVertexAsRequired( sVertex, 1019, curLF ); break;
//DeadCode JON 30Oct00 		case 1020: TransformVertexAsRequired( sVertex, 1020, curLF ); break;
//DeadCode JON 30Oct00 		case 1021: TransformVertexAsRequired( sVertex, 1021, curLF ); break;
//DeadCode JON 30Oct00 		case 1022: TransformVertexAsRequired( sVertex, 1022, curLF ); break;
//DeadCode JON 30Oct00 		case 1023: TransformVertexAsRequired( sVertex, 1023, curLF ); break;
	NODEFAULT;
	}
}
